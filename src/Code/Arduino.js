/* eslint-disable */
/*-----Variables y Librerias
	Blockly.Arduino.definitions_
*/
/*-----setup()
 	Blockly.Arduino.setups_ 
*/
/*-----loop()
	return""
*/
/* eslint-disable */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) { // AMD
    define(['../blockly copy/core'], factory);
  } else if (typeof exports === 'object') { // Node.js
    module.exports = factory(require('../blockly copy/core'));
  } else { // Browser
    root.Blockly.Arduino = factory(root.Blockly);
  }
}(this, function (Blockly) {
  // Do not edit this file; automatically generated by build.py.
  'use strict';


  Blockly.Arduino = new Blockly.Generator("Arduino");
  Blockly.Arduino.addReservedWords("Blockly,break,case,catch,continue,debugger,default,delete,do,else,finally,for,function,if,in,instanceof,new,return,switch,this,throw,try,typeof,var,void,while,with,class,enum,export,extends,import,super,implements,interface,let,package,private,protected,public,static,yield,const,null,true,false,Array,ArrayBuffer,Boolean,Date,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Error,eval,EvalError,Float32Array,Float64Array,Function,Infinity,Int16Array,Int32Array,Int8Array,isFinite,isNaN,Iterator,JSON,Math,NaN,Number,Object,parseFloat,parseInt,RangeError,ReferenceError,RegExp,StopIteration,String,SyntaxError,TypeError,Uint16Array,Uint32Array,Uint8Array,Uint8ClampedArray,undefined,uneval,URIError,applicationCache,closed,Components,content,_content,controllers,crypto,defaultStatus,dialogArguments,directories,document,frameElement,frames,fullScreen,globalStorage,history,innerHeight,innerWidth,length,location,locationbar,localStorage,menubar,messageManager,mozAnimationStartTime,mozInnerScreenX,mozInnerScreenY,mozPaintCount,name,navigator,opener,outerHeight,outerWidth,pageXOffset,pageYOffset,parent,performance,personalbar,pkcs11,returnValue,screen,screenX,screenY,scrollbars,scrollMaxX,scrollMaxY,scrollX,scrollY,self,sessionStorage,sidebar,status,statusbar,toolbar,top,URL,window,addEventListener,alert,atob,back,blur,btoa,captureEvents,clearImmediate,clearInterval,clearTimeout,close,confirm,disableExternalCapture,dispatchEvent,dump,enableExternalCapture,escape,find,focus,forward,GeckoActiveXObject,getAttention,getAttentionWithCycleCount,getComputedStyle,getSelection,home,matchMedia,maximize,minimize,moveBy,moveTo,mozRequestAnimationFrame,open,openDialog,postMessage,print,prompt,QueryInterface,releaseEvents,removeEventListener,resizeBy,resizeTo,restore,routeEvent,scroll,scrollBy,scrollByLines,scrollByPages,scrollTo,setCursor,setImmediate,setInterval,setResizable,setTimeout,showModalDialog,sizeToContent,stop,unescape,updateCommands,XPCNativeWrapper,XPCSafeJSObjectWrapper,onabort,onbeforeunload,onblur,onchange,onclick,onclose,oncontextmenu,ondevicemotion,ondeviceorientation,ondragdrop,onerror,onfocus,onhashchange,onkeydown,onkeypress,onkeyup,onload,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,onmozbeforepaint,onpaint,onpopstate,onreset,onresize,onscroll,onselect,onsubmit,onunload,onpageshow,onpagehide,Image,Option,Worker,Event,Range,File,FileReader,Blob,BlobBuilder,Attr,CDATASection,CharacterData,Comment,console,DocumentFragment,DocumentType,DomConfiguration,DOMError,DOMErrorHandler,DOMException,DOMImplementation,DOMImplementationList,DOMImplementationRegistry,DOMImplementationSource,DOMLocator,DOMObject,DOMString,DOMStringList,DOMTimeStamp,DOMUserData,Entity,EntityReference,MediaQueryList,MediaQueryListListener,NameList,NamedNodeMap,Node,NodeFilter,NodeIterator,NodeList,Notation,Plugin,PluginArray,ProcessingInstruction,SharedWorker,Text,TimeRanges,Treewalker,TypeInfo,UserDataHandler,Worker,WorkerGlobalScope,HTMLDocument,HTMLElement,HTMLAnchorElement,HTMLAppletElement,HTMLAudioElement,HTMLAreaElement,HTMLBaseElement,HTMLBaseFontElement,HTMLBodyElement,HTMLBRElement,HTMLButtonElement,HTMLCanvasElement,HTMLDirectoryElement,HTMLDivElement,HTMLDListElement,HTMLEmbedElement,HTMLFieldSetElement,HTMLFontElement,HTMLFormElement,HTMLFrameElement,HTMLFrameSetElement,HTMLHeadElement,HTMLHeadingElement,HTMLHtmlElement,HTMLHRElement,HTMLIFrameElement,HTMLImageElement,HTMLInputElement,HTMLKeygenElement,HTMLLabelElement,HTMLLIElement,HTMLLinkElement,HTMLMapElement,HTMLMenuElement,HTMLMetaElement,HTMLModElement,HTMLObjectElement,HTMLOListElement,HTMLOptGroupElement,HTMLOptionElement,HTMLOutputElement,HTMLParagraphElement,HTMLParamElement,HTMLPreElement,HTMLQuoteElement,HTMLScriptElement,HTMLSelectElement,HTMLSourceElement,HTMLSpanElement,HTMLStyleElement,HTMLTableElement,HTMLTableCaptionElement,HTMLTableCellElement,HTMLTableDataCellElement,HTMLTableHeaderCellElement,HTMLTableColElement,HTMLTableRowElement,HTMLTableSectionElement,HTMLTextAreaElement,HTMLTimeElement,HTMLTitleElement,HTMLTrackElement,HTMLUListElement,HTMLUnknownElement,HTMLVideoElement,HTMLCanvasElement,CanvasRenderingContext2D,CanvasGradient,CanvasPattern,TextMetrics,ImageData,CanvasPixelArray,HTMLAudioElement,HTMLVideoElement,NotifyAudioAvailableEvent,HTMLCollection,HTMLAllCollection,HTMLFormControlsCollection,HTMLOptionsCollection,HTMLPropertiesCollection,DOMTokenList,DOMSettableTokenList,DOMStringMap,RadioNodeList,SVGDocument,SVGElement,SVGAElement,SVGAltGlyphElement,SVGAltGlyphDefElement,SVGAltGlyphItemElement,SVGAnimationElement,SVGAnimateElement,SVGAnimateColorElement,SVGAnimateMotionElement,SVGAnimateTransformElement,SVGSetElement,SVGCircleElement,SVGClipPathElement,SVGColorProfileElement,SVGCursorElement,SVGDefsElement,SVGDescElement,SVGEllipseElement,SVGFilterElement,SVGFilterPrimitiveStandardAttributes,SVGFEBlendElement,SVGFEColorMatrixElement,SVGFEComponentTransferElement,SVGFECompositeElement,SVGFEConvolveMatrixElement,SVGFEDiffuseLightingElement,SVGFEDisplacementMapElement,SVGFEDistantLightElement,SVGFEFloodElement,SVGFEGaussianBlurElement,SVGFEImageElement,SVGFEMergeElement,SVGFEMergeNodeElement,SVGFEMorphologyElement,SVGFEOffsetElement,SVGFEPointLightElement,SVGFESpecularLightingElement,SVGFESpotLightElement,SVGFETileElement,SVGFETurbulenceElement,SVGComponentTransferFunctionElement,SVGFEFuncRElement,SVGFEFuncGElement,SVGFEFuncBElement,SVGFEFuncAElement,SVGFontElement,SVGFontFaceElement,SVGFontFaceFormatElement,SVGFontFaceNameElement,SVGFontFaceSrcElement,SVGFontFaceUriElement,SVGForeignObjectElement,SVGGElement,SVGGlyphElement,SVGGlyphRefElement,SVGGradientElement,SVGLinearGradientElement,SVGRadialGradientElement,SVGHKernElement,SVGImageElement,SVGLineElement,SVGMarkerElement,SVGMaskElement,SVGMetadataElement,SVGMissingGlyphElement,SVGMPathElement,SVGPathElement,SVGPatternElement,SVGPolylineElement,SVGPolygonElement,SVGRectElement,SVGScriptElement,SVGStopElement,SVGStyleElement,SVGSVGElement,SVGSwitchElement,SVGSymbolElement,SVGTextElement,SVGTextPathElement,SVGTitleElement,SVGTRefElement,SVGTSpanElement,SVGUseElement,SVGViewElement,SVGVKernElement,SVGAngle,SVGColor,SVGICCColor,SVGElementInstance,SVGElementInstanceList,SVGLength,SVGLengthList,SVGMatrix,SVGNumber,SVGNumberList,SVGPaint,SVGPoint,SVGPointList,SVGPreserveAspectRatio,SVGRect,SVGStringList,SVGTransform,SVGTransformList,SVGAnimatedAngle,SVGAnimatedBoolean,SVGAnimatedEnumeration,SVGAnimatedInteger,SVGAnimatedLength,SVGAnimatedLengthList,SVGAnimatedNumber,SVGAnimatedNumberList,SVGAnimatedPreserveAspectRatio,SVGAnimatedRect,SVGAnimatedString,SVGAnimatedTransformList,SVGPathSegList,SVGPathSeg,SVGPathSegArcAbs,SVGPathSegArcRel,SVGPathSegClosePath,SVGPathSegCurvetoCubicAbs,SVGPathSegCurvetoCubicRel,SVGPathSegCurvetoCubicSmoothAbs,SVGPathSegCurvetoCubicSmoothRel,SVGPathSegCurvetoQuadraticAbs,SVGPathSegCurvetoQuadraticRel,SVGPathSegCurvetoQuadraticSmoothAbs,SVGPathSegCurvetoQuadraticSmoothRel,SVGPathSegLinetoAbs,SVGPathSegLinetoHorizontalAbs,SVGPathSegLinetoHorizontalRel,SVGPathSegLinetoRel,SVGPathSegLinetoVerticalAbs,SVGPathSegLinetoVerticalRel,SVGPathSegMovetoAbs,SVGPathSegMovetoRel,ElementTimeControl,TimeEvent,SVGAnimatedPathData,SVGAnimatedPoints,SVGColorProfileRule,SVGCSSRule,SVGExternalResourcesRequired,SVGFitToViewBox,SVGLangSpace,SVGLocatable,SVGRenderingIntent,SVGStylable,SVGTests,SVGTextContentElement,SVGTextPositioningElement,SVGTransformable,SVGUnitTypes,SVGURIReference,SVGViewSpec,SVGZoomAndPan");
  Blockly.Arduino.ORDER_ATOMIC = 0;
  Blockly.Arduino.ORDER_NEW = 1.1;
  Blockly.Arduino.ORDER_MEMBER = 1.2;
  Blockly.Arduino.ORDER_FUNCTION_CALL = 2;
  Blockly.Arduino.ORDER_INCREMENT = 3;
  Blockly.Arduino.ORDER_DECREMENT = 3;
  Blockly.Arduino.ORDER_BITWISE_NOT = 4.1;
  Blockly.Arduino.ORDER_UNARY_PLUS = 4.2;
  Blockly.Arduino.ORDER_UNARY_NEGATION = 4.3;
  Blockly.Arduino.ORDER_LOGICAL_NOT = 4.4;
  Blockly.Arduino.ORDER_TYPEOF = 4.5;
  Blockly.Arduino.ORDER_VOID = 4.6;
  Blockly.Arduino.ORDER_DELETE = 4.7;
  Blockly.Arduino.ORDER_AWAIT = 4.8;
  Blockly.Arduino.ORDER_EXPONENTIATION = 5;
  Blockly.Arduino.ORDER_MULTIPLICATION = 5.1;
  Blockly.Arduino.ORDER_DIVISION = 5.2;
  Blockly.Arduino.ORDER_MODULUS = 5.3;
  Blockly.Arduino.ORDER_SUBTRACTION = 6.1;
  Blockly.Arduino.ORDER_ADDITION = 6.2;
  Blockly.Arduino.ORDER_BITWISE_SHIFT = 7;
  Blockly.Arduino.ORDER_RELATIONAL = 8;
  Blockly.Arduino.ORDER_IN = 8;
  Blockly.Arduino.ORDER_INSTANCEOF = 8;
  Blockly.Arduino.ORDER_EQUALITY = 9;
  Blockly.Arduino.ORDER_BITWISE_AND = 10;
  Blockly.Arduino.ORDER_BITWISE_XOR = 11;
  Blockly.Arduino.ORDER_BITWISE_OR = 12;
  Blockly.Arduino.ORDER_LOGICAL_AND = 13;
  Blockly.Arduino.ORDER_LOGICAL_OR = 14;
  Blockly.Arduino.ORDER_CONDITIONAL = 15;
  Blockly.Arduino.ORDER_ASSIGNMENT = 16;
  Blockly.Arduino.ORDER_YIELD = 17;
  Blockly.Arduino.ORDER_COMMA = 18;
  Blockly.Arduino.ORDER_NONE = 99;
  Blockly.Arduino.ORDER_OVERRIDES = [
    [Blockly.Arduino.ORDER_FUNCTION_CALL, Blockly.Arduino.ORDER_MEMBER],
    [Blockly.Arduino.ORDER_FUNCTION_CALL, Blockly.Arduino.ORDER_FUNCTION_CALL],
    [Blockly.Arduino.ORDER_MEMBER, Blockly.Arduino.ORDER_MEMBER],
    [Blockly.Arduino.ORDER_MEMBER, Blockly.Arduino.ORDER_FUNCTION_CALL],
    [Blockly.Arduino.ORDER_LOGICAL_NOT, Blockly.Arduino.ORDER_LOGICAL_NOT],
    [Blockly.Arduino.ORDER_MULTIPLICATION, Blockly.Arduino.ORDER_MULTIPLICATION],
    [Blockly.Arduino.ORDER_ADDITION, Blockly.Arduino.ORDER_ADDITION],
    [Blockly.Arduino.ORDER_LOGICAL_AND, Blockly.Arduino.ORDER_LOGICAL_AND],
    [Blockly.Arduino.ORDER_LOGICAL_OR, Blockly.Arduino.ORDER_LOGICAL_OR]
  ];
  var profile = {
    common: {
      number_type: "Number Byte Unsigned_Int Long Unsigned_Long Word Char Float Double Volatile_Int".split(" ")
    },
    arduino: {
      description: "Arduino standard-compatible board",
      digital: [
        ["0", "0"],
        ["1", "1"],
        ["2", "2"],
        ["3", "3"],
        ["4", "4"],
        ["5", "5"],
        ["6", "6"],
        ["7", "7"],
        ["8", "8"],
        ["9", "9"],
        ["10", "10"],
        ["11", "11"],
        ["12", "12"],
        ["13", "13"],
        ["14", "14"],
        ["15", "15"],
        ["16", "16"],
        ["17", "17"]
      ],
      grove_digital: [
        ["D2", "2"],
        ["D3", "3"],
        ["D4", "4"],
        ["D5", "5"],
        ["D6", "6"],
        ["D7", "7"],
        ["D8", "8"],
        ["D10", "10"],
        ["D11",
          "11"
        ],
        ["D12", "12"],
        ["A0", "A0"],
        ["A1", "A1"],
        ["A2", "A2"],
        ["A3", "A3"]
      ],
      //bluetooth 1
      rxtx: [
        ["0-RX", "0"],
        ["1-TX", "1"],
        ["2", "2"],
        ["3", "3"],
        ["4", "4"],
        ["5", "5"],
        ["6", "6"],
        ["7", "7"],
        ["8", "8"],
        ["9", "9"],
        ["10", "10"],
        ["11", "11"],
        ["12", "12"]
      ],

      //pontenciometro

      sensor_range: [
        ["%", "PERCENT"],
        ["0..1023",
          "RAW"
        ]
      ],
      digital_4: [
        ["0-RX", "0"],
        ["1-TX", "1"],
        ["2", "2"],
        ["3", "3"],
        ["4", "4"],
        ["5", "5"],
        ["6", "6"],
        ["7", "7"],
        ["8", "8"],
        ["9", "9"],
        ["10", "10"],
        ["11", "11"],
        ["12", "12"],
        ["13", "13"],
        ["A0", "A0"],
        ["A1", "A1"],
        ["A2", "A2"],
        ["A3", "A3"],
        ["A4", "A4"],
        ["A5", "A5"]
      ],


      analog: [
        ["A0", "A0"],
        ["A1", "A1"],
        ["A2", "A2"],
        ["A3", "A3"],
        ["A4", "A4"],
        ["A5", "A5"],
        ["A6", "A6"],
        ["A7", "A7"]
      ],
      analog_2: [
        ["A0", "A0"],
        ["A1", "A1"],
        ["A2", "A2"],
        ["A3", "A3"],
        ["A4", "A4"],
        ["A5", "A5"]
      ],
      grove_analog: [
        ["A0", "A0"],
        ["A1", "A1"],
        ["A2", "A2"],
        ["A3", "A3"]
      ],
      pwm: [
        ["0", "0"],
        ["1", "1"],
        ["2", "2"],
        ["3", "3"],
        ["4", "4"],
        ["5", "5"],
        ["6", "6"],
        ["7", "7"],
        ["8", "8"],
        ["9", "9"],
        ["10", "10"],
        ["11", "11"],
        ["12", "12"],
        ["13", "13"],
        ["14", "14"],
        ["15", "15"],
        ["16", "16"],
        ["17", "17"]
      ],
      serial: 9600,
      tone: [
        ["C:Do", "262"],
        ["D:Re", "294"],
        ["E:Mi", "330"],
        ["F:Fa", "349"],
        ["G:So", "392"],
        ["A:La", "440"],
        ["B:Ti", "494"],
        ["C:Do", "523"]
      ],
      lcd: [
        ["-", "-"],
        ["0", "0"],
        ["1", "1"],
        ["2", "2"],
        ["3", "3"],
        ["4", "4"],
        ["5", "5"],
        ["6", "6"],
        ["7", "7"],
        ["8", "8"],
        ["9", "9"],
        ["10", "10"],
        ["11", "11"],
        ["12", "12"],
        ["13", "13"],
        ["A0", "A0"],
        ["A1", "A1"],
        ["A2", "A2"],
        ["A3", "A3"],
        ["A4", "A4"],
        ["A5", "A5"]
      ],
      dht: [
        ["DHT11", "DHT11"],
        ["DHT21", "DHT21"],
        ["DHT22", "DHT22"]
      ],
      i2c_matrix_type: [
        ["8x8", "8x8matrix"],
        ["16x8", "8x16matrix"],
        ["bi_color8x8", "BicolorMatrix"]
      ],
      led_backpack_address: [
        ["0x70", "0x70"],
        ["0x71", "0x71"],
        ["0x72", "0x72"],
        ["0x73", "0x73"]
      ],
      blynk_merge_index: [
        ["0", "0"],
        ["1", "1"],
        ["2", "2"]
      ],
      shield_bot_sensor: [
        ["1", "1"],
        ["2", "2"],
        ["3", "3"],
        ["4", "4"],
        ["5", "5"]
      ],
      interrupt: [
        ["2", "0"],
        ["3", "1"]
      ],
      //PULSADOR PIN

      ir_remote_button: [
        ["Power", "POWER"],
        ["A", "A"],
        ["B", "B"],
        ["C", "C"],
        ["Up", "UP"],
        ["Down", "DOWN"],
        ["Left", "LEFT"],
        ["Right", "RIGHT"],
        ["Select", "SELECT"]
      ]
    },
    arduino_mega: {
      description: "Arduino Mega-compatible board",
      analog: [
        ["A0", "A0"],
        ["A1", "A1"],
        ["A2", "A2"],
        ["A3", "A3"],
        ["A4", "A4"],
        ["A5", "A5"],
        ["A6", "A6"],
        ["A7", "A7"],
        ["A8", "A8"],
        ["A9", "A9"],
        ["A10", "A10"],
        ["A11", "A11"],
        ["A12", "A12"],
        ["A13", "A13"],
        ["A14", "A14"],
        ["A15", "A15"]
      ]


    },
    color: {
      cate_logico: "#1d72f2",
      cate_bucles: "#721df2",
      cate_math: "#c41df2",
      cate_text: "#f2b91d",
      cate_inicializar: "#ed8e1a",
      cate_variables: "#49f5ef",
      cate_digital: "#36f52c",
      cate_procedure: "#ff5500",
      cate_analogico: "#ff4d70",
      cate_serial: "#fa1e1e",
      cate_time: "#ad541c",
      cate_servo: "#1c3ed6",
    }
  };
  profile["default"] = profile.arduino;

  Blockly.Arduino.pinesNormal = profile.arduino
  Blockly.Arduino.colores = profile.color
  //iniciador
  Blockly.Arduino.init = function (a) {
    Blockly.Arduino.definitions_ = Object.create(null);
    Blockly.Arduino.setups_ = Object.create(null);
    Blockly.Arduino.functionNames_ = Object.create(null);
    Blockly.Arduino.variableDB_ ? Blockly.Arduino.variableDB_.reset() : Blockly.Arduino.variableDB_ = new Blockly.Names(Blockly.Arduino.RESERVED_WORDS_);
    Blockly.Arduino.variableDB_.setVariableMap(a.getVariableMap());
    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.Arduino.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE));
    a = Blockly.Variables.allUsedVarModels(a);
    for (d = 0; d < a.length; d++) b.push(Blockly.Arduino.variableDB_.getName(a[d].getId(), Blockly.Variables.NAME_TYPE));
    b.length && (Blockly.Arduino.definitions_.variables = "var " + b.join(", ") + ";")
  };
  /*16*/
  Blockly.Arduino.finish = function (a) {
    a = "  " + a.replace(/\n/g, "\n");
    a = a.replace(/\n\s+$/, "\n");
    a = "void loop() \n{\n" + a + "\n}";
    var b = [],
      c = [];
    for (e in Blockly.Arduino.definitions_) {
      var d = Blockly.Arduino.definitions_[e];
      d.match(/^#include/) ? b.push(d) : c.push(d)
    }
    d = [];
    for (e in Blockly.Arduino.setups_) d.push(Blockly.Arduino.setups_[e]);
    var e = new Date((new Date).getTime());
    b = b.join("\n") + "\n\n" + c.join("\n") + "\n\nvoid setup() \n{\n  " + d.join("\n  ") + "\n}\n\n";
    b = b.replace(/\n\n+/g, "\n\n").replace(/\n*$/, "\n\n\n") +
      a;
    return b = "/*\n * Código generado usando PlayTecDuino\n */\n\n" + b
  };

  Blockly.Arduino.scrubNakedValue = function (a) {
    return a + ";\n"
  };

  Blockly.Arduino.quote_ = function (a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/'/g, "\\'");
    return "'" + a + "'"
  };

  Blockly.Arduino.multiline_quote_ = function (a) {
    return a.split(/\n/g).map(Blockly.Arduino.quote_).join(" + '\\n' +\n")
  };

  Blockly.Arduino.scrub_ = function (a, b, c) {
    var d = "";
    if (!a.outputConnection || !a.outputConnection.targetConnection) {
      var e = a.getCommentText();

      e && (e = Blockly.utils.string.wrap(e, Blockly.Arduino.COMMENT_WRAP - 3), d += Blockly.Arduino.prefixLines(e + "\n", "// "));
      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.Arduino.allNestedComments(e)) && (d += Blockly.Arduino.prefixLines(e, "// "))
    }
    a = a.nextConnection && a.nextConnection.targetBlock();

    c = c ? "" : Blockly.Arduino.blockToCode(a);
    return d + b + c
  };

  Blockly.Arduino.getAdjusted = function (a, b, c, d, e) {
    c = c || 0;
    e = e || Blockly.Arduino.ORDER_NONE;
    a.workspace.options.oneBasedIndex && c--;
    var f = a.workspace.options.oneBasedIndex ? "1" : "0";
    a = 0 < c ? Blockly.Arduino.valueToCode(a, b, Blockly.Arduino.ORDER_ADDITION) || f : 0 > c ? Blockly.Arduino.valueToCode(a, b, Blockly.Arduino.ORDER_SUBTRACTION) || f : d ? Blockly.Arduino.valueToCode(a, b, Blockly.Arduino.ORDER_UNARY_NEGATION) || f : Blockly.Arduino.valueToCode(a, b, e) || f;
    if (Blockly.isNumber(a)) a = Number(a) + c, d && (a = -a);
    else {
      if (0 < c) {
        a = a + " + " + c;
        var g = Blockly.Arduino.ORDER_ADDITION
      } else 0 > c && (a = a + " - " + -c, g = Blockly.Arduino.ORDER_SUBTRACTION);
      d && (a = c ? "-(" + a + ")" : "-" + a, g = Blockly.Arduino.ORDER_UNARY_NEGATION);
      g = Math.floor(g);
      e = Math.floor(e);
      g && e >= g && (a = "(" + a + ")")
    }
    return a
  };

  Blockly.Arduino.colour = {};

  Blockly.Arduino.colour_picker = function (a) {
    return [Blockly.Arduino.quote_(a.getFieldValue("COLOUR")), Blockly.Arduino.ORDER_ATOMIC]
  };

  Blockly.Arduino.colour_random = function (a) {
    return [Blockly.Arduino.provideFunction_("colourRandom", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "() {", "  var num = Math.floor(Math.random() * Math.pow(2, 24));", "  return '#' + ('00000' + num.toString(16)).substr(-6);", "}"]) + "()", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.colour_rgb = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "RED", Blockly.Arduino.ORDER_COMMA) || 0,
      c = Blockly.Arduino.valueToCode(a, "GREEN", Blockly.Arduino.ORDER_COMMA) || 0;
    a = Blockly.Arduino.valueToCode(a, "BLUE", Blockly.Arduino.ORDER_COMMA) || 0;
    return [Blockly.Arduino.provideFunction_("colourRgb", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(r, g, b) {", "  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;", "  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;", "  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;", "  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);", "  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);", "  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.colour_blend = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "COLOUR1", Blockly.Arduino.ORDER_COMMA) || "'#000000'",
      c = Blockly.Arduino.valueToCode(a, "COLOUR2", Blockly.Arduino.ORDER_COMMA) || "'#000000'";
    a = Blockly.Arduino.valueToCode(a, "RATIO", Blockly.Arduino.ORDER_COMMA) || .5;
    return [Blockly.Arduino.provideFunction_("colourBlend", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(c1, c2, ratio) {", "  ratio = Math.max(Math.min(Number(ratio), 1), 0);", "  var r1 = parseInt(c1.substring(1, 3), 16);", "  var g1 = parseInt(c1.substring(3, 5), 16);", "  var b1 = parseInt(c1.substring(5, 7), 16);", "  var r2 = parseInt(c2.substring(1, 3), 16);", "  var g2 = parseInt(c2.substring(3, 5), 16);", "  var b2 = parseInt(c2.substring(5, 7), 16);", "  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);", "  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);", "  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);", "  r = ('0' + (r || 0).toString(16)).slice(-2);", "  g = ('0' + (g || 0).toString(16)).slice(-2);", "  b = ('0' + (b || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/  

  //Category Logic//
  Blockly.Arduino.logic = {};

  //mi propio bloque
  Blockly.Arduino.react_logic_boolean_lights = function(a){
    return ["TRUE" == a.getFieldValue("BOOL") ? "Lights on" : "lights off", Blockly.Arduino.ORDER_ATOMIC]
  }

  //Codigo 1er bloque
  Blockly.Arduino.react_controls_if = function (a) {
    var b = 0,
      c = "";
    Blockly.Arduino.STATEMENT_PREFIX && (c += Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_PREFIX, a));
    do {
      var d = Blockly.Arduino.valueToCode(a, "IF sale seci" + b, Blockly.Arduino.ORDER_NONE) || "false";
      var e = Blockly.Arduino.statementToCode(a, "DO" + b);
      Blockly.Arduino.STATEMENT_SUFFIX && (e = Blockly.Arduino.prefixLines(Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_SUFFIX, a), Blockly.Arduino.INDENT) + e);
      c += (0 < b ? " else" : "") + "if (" + d + ") {\n" + e + "}"; ++b
    } while
      (a.getInput("IF" + b));
    if (a.getInput("ELSE") || Blockly.Arduino.STATEMENT_SUFFIX) e = Blockly.Arduino.statementToCode(a, "ELSE"), Blockly.Arduino.STATEMENT_SUFFIX && (e = Blockly.Arduino.prefixLines(Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_SUFFIX, a), Blockly.Arduino.INDENT) + e), c += " else {\n" + e + "}";
    return c + "\n"
  };

  Blockly.Arduino.controls_ifelse = Blockly.Arduino.controls_if;
  //Codigo 2do bloque
  Blockly.Arduino.react_logic_compare = function (a) {
    var b = {
      EQ: "==",
      NEQ: "!=",
      LT: "<",
      LTE: "<=",
      GT: ">",
      GTE: ">="
    }[a.getFieldValue("OP")],
      c = "==" == b || "!=" == b ? Blockly.Arduino.ORDER_EQUALITY : Blockly.Arduino.ORDER_RELATIONAL,
      d = Blockly.Arduino.valueToCode(a, "A", c) || "0";
    a = Blockly.Arduino.valueToCode(a, "B", c) || "0";
    return [d + " " + b + " " + a, c]
  };
  //Codigo 3er bloque
  Blockly.Arduino.react_logic_operation = function (a) {
    var b = "AND" == a.getFieldValue("OP") ? "&&" : "||",
      c = "&&" == b ? Blockly.Arduino.ORDER_LOGICAL_AND : Blockly.Arduino.ORDER_LOGICAL_OR,
      d = Blockly.Arduino.valueToCode(a, "A", c);
    a = Blockly.Arduino.valueToCode(a, "B", c);
    if (d || a) {
      var e = "&&" == b ? "true" : "false";
      d || (d = e);
      a || (a = e)
    } else a = d = "false";
    return [d + " " + b + " " + a, c]
  };
  //Codigo 4to bloque
  Blockly.Arduino.react_logic_negate = function (a) {
    var b = Blockly.Arduino.ORDER_LOGICAL_NOT;
    return ["!" + (Blockly.Arduino.valueToCode(a, "BOOL", b) || "true"), b]
  };
  //Codigo 5to bloque
  Blockly.Arduino.react_logic_boolean = function (a) {
    return ["TRUE" == a.getFieldValue("BOOL") ? "true" : "false", Blockly.Arduino.ORDER_ATOMIC]
  };

  // fin Category Logic//
  //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
  ///Category Bucles//

  Blockly.Arduino.loops = {};
  //Codigo del 1er Bloque

  Blockly.Arduino.react_controls_repeat = function (a) {
    var b = a.getField("TIMES") ? String(Number(a.getFieldValue("TIMES"))) : Blockly.Arduino.valueToCode(a, "TIMES", Blockly.Arduino.ORDER_ASSIGNMENT) || "0",
      c = Blockly.Arduino.statementToCode(a, "DO");
    c = Blockly.Arduino.addLoopTrap(c, a);
    a = "";
    var d = Blockly.Arduino.variableDB_.getDistinctName("count", Blockly.Variables.NAME_TYPE),
      e = b;
    b.match(/^\w+$/) || Blockly.isNumber(b) || (e = Blockly.Arduino.variableDB_.getDistinctName("repeat_end", Blockly.Variables.NAME_TYPE), a += "var " + e + " = " + b + ";\n");
    return a + ("for (var " + d + " = 0; " + d + " < " + e + "; " + d + "++) {\n" + c + "}\n")
  };
  //Codigo del 2do Bloque

  Blockly.Arduino.react_controls_while = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "BOOL", Blockly.Arduino.ORDER_NONE) || "false",
      c = Blockly.Arduino.statementToCode(a, "DO");
    c = Blockly.Arduino.addLoopTrap(c, a.id);
    return "while (" + b + ") {\n" + c + "}\n"
  };
  //Codigo del 3er Bloque

  Blockly.Arduino.react_controls_for = function () {
    var a = Blockly.Arduino.variableDB_.getName(this.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
      b = Blockly.Arduino.valueToCode(this, "FROM", Blockly.Arduino.ORDER_ASSIGNMENT) || "0",
      c = Blockly.Arduino.valueToCode(this, "TO", Blockly.Arduino.ORDER_ASSIGNMENT) || "0",
      d = Blockly.Arduino.statementToCode(this, "DO");
    Blockly.Arduino.INFINITE_LOOP_TRAP && (d = Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + this.id + "'") + d);
    if (b.match(/^-?\d+(\.\d+)?$/) && c.match(/^-?\d+(\.\d+)?$/)) {
      var e =
        parseFloat(b) <= parseFloat(c);
      d = "for (" + a + " = " + b + "; " + a + (e ? " <= " : " >= ") + c + "; " + a + (e ? "++" : "--") + ") {\n" + d + "}\n"
    } else d = "", e = b, b.match(/^\w+$/) || b.match(/^-?\d+(\.\d+)?$/) || (e = Blockly.Arduino.variableDB_.getDistinctName(a + "_start", Blockly.Variables.NAME_TYPE), d += "int " + e + " = " + b + ";\n"), b = c, c.match(/^\w+$/) || c.match(/^-?\d+(\.\d+)?$/) || (b = Blockly.Arduino.variableDB_.getDistinctName(a + "_end", Blockly.Variables.NAME_TYPE), d += "int " + b + " = " + c + ";\n"), d += "for (" + a + " = " + e + ";\n    (" + e + " <= " + b + ") ? " + a +
      " <= " + b + " : " + a + " >= " + b + ";\n    " + a + " += (" + e + " <= " + b + ") ? 1 : -1) {\n" + branch0 + "}\n";
    return d
  };
  //Codigo del 4to Bloque

  Blockly.Arduino.react_controls_flow_statements = function (a) {
    switch (a.getFieldValue("FLOW")) {
      case "BREAK":
        return "break;\n";
      case "CONTINUE":
        return "continue;\n"
    }
    throw "Unknown flow statement.";
  };
  // fin  Category Bucle
  //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
  //Category Math//

  Blockly.Arduino.math = {};
  //1er Bloque
  Blockly.Arduino.react_math_number = function (a) {
    a = Number(a.getFieldValue("NUM"));

    return [a, 0 <= a ? Blockly.Arduino.ORDER_ATOMIC : Blockly.Arduino.ORDER_UNARY_NEGATION]
  };
  //2do bloque

  Blockly.Arduino.react_cast_number = function () {
    var a = this.getFieldValue("TYPE"),
      b = Blockly.Arduino.valueToCode(this, "NUM", Blockly.Arduino.ORDER_ATOMIC) || "0";
    return [a + " " + b, Blockly.Arduino.ORDER_ATOMIC]
  };
  //3 er bloque
  Blockly.Arduino.react_math_arithmetic = function (a) {
    var b = {
      ADD: [" + ", Blockly.Arduino.ORDER_ADDITION],
      MINUS: [" - ", Blockly.Arduino.ORDER_SUBTRACTION],
      MULTIPLY: [" * ", Blockly.Arduino.ORDER_MULTIPLICATION],
      DIVIDE: [" / ", Blockly.Arduino.ORDER_DIVISION],
      POWER: [null, Blockly.Arduino.ORDER_COMMA]
    }[a.getFieldValue("OP")],
      c = b[0];
    b = b[1];
    var d = Blockly.Arduino.valueToCode(a, "A", b) || "0";
    a = Blockly.Arduino.valueToCode(a, "B", b) || "0";
    return c ? [d + c + a, b] : ["Math.pow(" + d + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  //4to Bloque
  Blockly.Arduino.react_math_single = function (a) {
    var b = a.getFieldValue("OP");
    if ("NEG" == b) return a = Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_UNARY_NEGATION) || "0", "-" == a[0] && (a = " " + a), ["-" + a, Blockly.Arduino.ORDER_UNARY_NEGATION];
    a = "SIN" == b || "COS" == b || "TAN" == b ? Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_DIVISION) || "0" : Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_NONE) || "0";
    switch (b) {
      case "ABS":
        var c = "Math.abs(" + a + ")";
        break;
      case "ROOT":
        c = "Math.sqrt(" + a + ")";
        break;
      case "LN":
        c = "Math.log(" + a + ")";
        break;
      case "EXP":
        c = "Math.exp(" + a + ")";
        break;
      case "POW10":
        c = "Math.pow(10," + a + ")";
        break;
      case "ROUND":
        c = "Math.round(" + a + ")";
        break;
      case "ROUNDUP":
        c = "Math.ceil(" + a + ")";
        break;
      case "ROUNDDOWN":
        c = "Math.floor(" + a + ")";
        break;
      case "SIN":
        c = "Math.sin(" + a + " / 180 * Math.PI)";
        break;
      case "COS":
        c = "Math.cos(" + a + " / 180 * Math.PI)";
        break;
      case "TAN":
        c = "Math.tan(" + a + " / 180 * Math.PI)"
    }
    if (c) return [c, Blockly.Arduino.ORDER_FUNCTION_CALL];
    switch (b) {
      case "LOG10":
        c = "Math.log(" + a + ") / Math.log(10)";
        break;
      case "ASIN":
        c = "Math.asin(" + a + ") / Math.PI * 180";
        break;
      case "ACOS":
        c = "Math.acos(" + a + ") / Math.PI * 180";
        break;
      case "ATAN":
        c = "Math.atan(" + a + ") / Math.PI * 180";
        break;
      default:
        throw Error("Unknown math operator: " + b);
    }
    return [c, Blockly.Arduino.ORDER_DIVISION]
  };
  //5to bloque

  Blockly.Arduino.react_math_constrain = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_NONE) || "0",
      c = Blockly.Arduino.valueToCode(a, "LOW", Blockly.Arduino.ORDER_NONE) || "0";
    a = Blockly.Arduino.valueToCode(a, "HIGH", Blockly.Arduino.ORDER_NONE) || "255";
    return ["constrain(" + b + ", " + c + "," + a + ")", Blockly.Arduino.ORDER_NONE]
  };
  //6to Bloque
  Blockly.Arduino.react_math_pow = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "pow", Blockly.Arduino.ORDER_NONE) || "0",
      c = Blockly.Arduino.valueToCode(a, "exp", Blockly.Arduino.ORDER_NONE) || "0";
    return ["pow(" + b + ", " + c + ")", Blockly.Arduino.ORDER_NONE]
  };
  //7to Bloque
  Blockly.Arduino.react_math_random_max_min = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "MAX", Blockly.Arduino.ORDER_ATOMIC) || "1";
    a = Blockly.Arduino.valueToCode(a, "MIN", Blockly.Arduino.ORDER_ATOMIC) || "0";
    return [0 < a ? "random(" + a + ", " + b + ")" : "random(" + b + ")", Blockly.Arduino.ORDER_NONE]
  };

  //fin Category Math//

  //Categoria Text//
  Blockly.Arduino.react_text = {};

  Blockly.Arduino.quote_ = function (a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/'/g, "\\'");
    return "'" + a + "'"
  };

  Blockly.Arduino.quote2 = function (a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/\$/g, "\\$").replace(/'/g, "\\'");
    return '"' + a + '"'
  };
  /*1er Bloque */
  Blockly.Arduino.react_text = function () {
    return [Blockly.Arduino.quote2(this.getFieldValue("TEXT")), Blockly.Arduino.ORDER_ATOMIC]
  };
  /*2do Bloque*/
  Blockly.Arduino.react_textapos = function () {
    return [Blockly.Arduino.quote_(this.getFieldValue("TEXT")), Blockly.Arduino.ORDER_ATOMIC]
  };
  /*3er Bloque */
  Blockly.Arduino.react_comment_out = function () {
    return "/*\n" + Blockly.Arduino.statementToCode(this, "CONTENT") + "\n*/\n"
  };
  //fin Category Text//



  // ---->->-> categoria variables
  Blockly.Arduino.variables = {};
  Blockly.Arduino.variables_get = function (a) {
    return [Blockly.Arduino.variableDB_.getName(this.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE), Blockly.Arduino.ORDER_ATOMIC]
  };
  Blockly.Arduino.variables_set = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_ASSIGNMENT) || "0",
      c = Blockly.Arduino.variableDB_.getName(this.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    for (var d = 0; d < a.length; d++)
      if (a[d][0] == c && "Array" == a[d][1]) return b = "int " + a[d][0] + "[] = " + b + ";\n", Blockly.Arduino.definitions_[a[d][0]] = b, "";
    return c + " = " + b + ";\n"
  };
  // ----> end region categoria variables

  ///Category Initializes

  //1 Bloque
  Blockly.Arduino.initializes = {};

  Blockly.Arduino.react_setup = function () {
    var a = Blockly.Arduino.statementToCode(this, "CONTENT");
    a = a.replace(/(^\s+)|(\s+$)/g, "");
    Blockly.Arduino.setups_['react_setup'] = a;
    return ""
  };
  Blockly.Arduino.react_initializes_loop = function () {
    var a = Blockly.Arduino.statementToCode(this, "CONTENT");
    return a = a.replace(/(^\s+)|(\s+$)/g, "")
  };
  Blockly.Arduino.react_initializes_temp = function () {
    return ""
  };
  //categoria procedure

  Blockly.Arduino.procedures = {};
  Blockly.Arduino.procedures_defreturn = function () {
    var a = Blockly.Arduino.variableDB_.getName(this.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE),
      b = Blockly.Arduino.statementToCode(this, "STACK");
    Blockly.Arduino.INFINITE_LOOP_TRAP && (b = Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + this.id + "'") + b);
    var c = Blockly.Arduino.valueToCode(this, "RETURN", Blockly.Arduino.ORDER_NONE) || "",
      d = this.getFieldValue("TYPE");
    c && (c = "  return " + c + ";\n");
    d = c ? d : "void";
    for (var e = [], f = 0; f < this.arguments_.length; f++) e[f] =
      Blockly.Arduino.variableDB_.getName(this.arguments_[f], Blockly.Variables.NAME_TYPE);
    b = d + " " + a + "(" + e.join(", ") + ") {\n" + b + c + "}\n";
    b = Blockly.Arduino.scrub_(this, b);
    Blockly.Arduino.definitions_[a] = b;
    return null
  };

  Blockly.Arduino.procedures_defnoreturn = Blockly.Arduino.procedures_defreturn;
  Blockly.Arduino.procedures_callreturn = function () {
    for (var a = Blockly.Arduino.variableDB_.getName(this.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE), b = [], c = 0; c < this.arguments_.length; c++) b[c] = Blockly.Arduino.valueToCode(this, "ARG" + c, Blockly.Arduino.ORDER_NONE) || "null";
    return [a + "(" + b.join(", ") + ")", Blockly.Arduino.ORDER_UNARY_POSTFIX]
  };

  Blockly.Arduino.procedures_callnoreturn = function () {
    for (var a = Blockly.Arduino.variableDB_.getName(this.getFieldValue("NAME"), Blockly.Procedures.NAME_TYPE), b = [], c = 0; c < this.arguments_.length; c++) b[c] = Blockly.Arduino.valueToCode(this, "ARG" + c, Blockly.Arduino.ORDER_NONE) || "null";
    return a + "(" + b.join(", ") + ");\n"
  };

  Blockly.Arduino.procedures_ifreturn = function () {
    var a = "if (" + (Blockly.Arduino.valueToCode(this, "CONDITION", Blockly.Arduino.ORDER_NONE) || "false") + ") {\n";
    if (this.hasReturnValue_) {
      var b = Blockly.Arduino.valueToCode(this, "VALUE", Blockly.Arduino.ORDER_NONE) || "null";
      a += "  return " + b + ";\n"
    } else a += "  return;\n";
    return a + "}\n"
  };


  //categoria iniciador 


  //categoria digital 
  Blockly.Arduino.Digital = {};
  Blockly.Arduino.react_inout_digital = function () {
    var a = this.getFieldValue("PIN"),
      b = this.getFieldValue("STAT");
    Blockly.Arduino.setups_["setup_output_" + a] = "pinMode(" + a + ", OUTPUT);";
    return "digitalWrite(" + a + ", " + b + ");\n"
  };
  Blockly.Arduino.inout_highlow = function () {
    var a = this.getFieldValue("PIN"),
      b = this.getFieldValue("STAT");
    Blockly.Arduino.setups_["setup_output_" + a] = "pinMode(" + a + ", OUTPUT);";
    return "digitalWrite(" + a + ", " + b + ");\n"
  };
  Blockly.Arduino.react_inout_highlow = function () {
    return ["HIGH" == this.getFieldValue("BOOL") ? "HIGH" : "LOW", Blockly.Arduino.ORDER_ATOMIC]
  };
  Blockly.Arduino.react_digital_read_pullup = function () {
    var a = Blockly.Arduino.valueToCode(this, "PIN_READ", Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.setups_["setup_output_" + a] = "pinMode(" + a + ", INPUT_PULLUP);";
    return ["digitalRead(" + a + ")", Blockly.Arduino.ORDER_ATOMIC]
  };
  //end categoria iniciador 

  //categoria analog
  //READ
  Blockly.Arduino.react_Analog_Read = function () {
    return ["analogRead(" + this.getFieldValue("PIN") + ")", Blockly.Arduino.ORDER_ATOMIC]
  };
  Blockly.Arduino.react_Analog_Read = function () {
    Blockly.Arduino.setups_ = ["pinMode(" + this.getFieldValue("PIN") + ",INPUT" + ");"];
    return ["analogRead(" + this.getFieldValue("PIN") + ")", Blockly.Arduino.ORDER_ATOMIC]
  };
  Blockly.Arduino.react_custom_analog_read = function () {
    return ["analogRead(" + Blockly.Arduino.valueToCode(this, "PIN_ANALOGREAD", Blockly.Arduino.ORDER_ATOMIC) + ")", Blockly.Arduino.ORDER_ATOMIC]
  }
  //WRITE
  Blockly.Arduino.react_Analog_write = function () {
    var a = this.getFieldValue("PIN"),
      b = Blockly.Arduino.valueToCode(this, "NUM", Blockly.Arduino.ORDER_ATOMIC);
    return "analogWrite(" + a + ", " + b + ");\n"
  };
  Blockly.Arduino.react_Analog_write = function () {
    var a = this.getFieldValue("PIN"),
      b = Blockly.Arduino.valueToCode(this, "NUM", Blockly.Arduino.ORDER_ATOMIC) || "255";
    Blockly.Arduino.setups_["setup_output_" + a] = "pinMode(" + a + ", OUTPUT);";
    return "analogWrite(" + a + ", " + b + ");\n"
  };
  //end categoria analog

  //categoria serial 
  Blockly.Arduino.serial = {};
  Blockly.Arduino.react_serial_init = function () {
    var a = Blockly.Arduino.valueToCode(this, "SPEED", Blockly.Arduino.ORDER_ATOMIC) || profile["default"].serial;
    void 0 == Blockly.Arduino.setups_.setup_serial && (Blockly.Arduino.setups_.setup_serial = "Serial.begin(" + a + ");\n");
    return ""
  };
  Blockly.Arduino.react_serial_available = function () {
    Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC);
    void 0 == Blockly.Arduino.setups_.setup_serial && (Blockly.Arduino.setups_.setup_serial = "Serial.begin(" + profile["default"].serial + ");\n");
    return ["Serial.available()", Blockly.Arduino.ORDER_ATOMIC]
  };
  Blockly.Arduino.react_serial_print = function () {
    var a = Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC);
    void 0 == Blockly.Arduino.setups_.setup_serial && (Blockly.Arduino.setups_.setup_serial = "Serial.begin(" + profile["default"].serial + ");\n");
    return "Serial.print(" + a + ");\n"
  };
  Blockly.Arduino.react_serial_println = function () {
    var a = Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC) || "0";
    void 0 == Blockly.Arduino.setups_.setup_serial && (Blockly.Arduino.setups_.setup_serial = "Serial.begin(" + profile["default"].serial + ");\n");
    return "Serial.println(" + a + ");\n"
  };
  Blockly.Arduino.react_serial_read = function () {
    Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC);
    void 0 == Blockly.Arduino.setups_.setup_serial && (Blockly.Arduino.setups_.setup_serial = "Serial.begin(" + profile["default"].serial + ");\n");
    return ["Serial.read()", Blockly.Arduino.ORDER_ATOMIC]
  };
  /* end category serial */


  /*categoria tone*/
  Blockly.Arduino.react_tone = function () {
    var a = this.getFieldValue("PIN"),
        b = this.getFieldValue("FREQ");
    return "tone(" + a + ", " + b + ");\n"
};
  Blockly.Arduino.react_custom_tone = function () {
    var a = Blockly.Arduino.valueToCode(this, "PIN", Blockly.Arduino.ORDER_ATOMIC) || 0,
        b = Blockly.Arduino.valueToCode(this, "FREQ", Blockly.Arduino.ORDER_ATOMIC) || 0,
        c = Blockly.Arduino.valueToCode(this, "DURATION", Blockly.Arduino.ORDER_ATOMIC) || 0;
    return "tone(" + a + ", " + b + ", " + c + ");\n"
};

  /*end tone*/
  /* categoria times */
  Blockly.Arduino.times = {};
  Blockly.Arduino.react_delay_custom = function () {
    return "delay(" + (Blockly.Arduino.valueToCode(this, "DELAY_TIME", Blockly.Arduino.ORDER_ATOMIC) || "1000") + ");\n"
  };
  Blockly.Arduino.react_millis = function () {
    return ["millis()", Blockly.Arduino.ORDER_ATOMIC]
  };
  Blockly.Arduino.react_micros = function () {
    return ["micros()", Blockly.Arduino.ORDER_ATOMIC]
  };
  /* end categoria times */
  /* categoria servo */
  Blockly.Arduino.servo = {};
  Blockly.Arduino.react_servo_write = function () {
    var a = this.getFieldValue("PIN"),
      b = Blockly.Arduino.valueToCode(this, "ANGLE", Blockly.Arduino.ORDER_ATOMIC) || "90";
    Blockly.Arduino.definitions_.define_servo = "#include <Servo.h>";
    Blockly.Arduino.definitions_["define_class_servo_" + a] = "Servo __myservo" + a + ";";
    Blockly.Arduino.setups_["servo_" + a] || (Blockly.Arduino.setups_["servo_" + a] = "__myservo" + a + ".attach(" + a + ");");
    return "__myservo" + a + ".write(" + b + ");\n"
  };

  Blockly.Arduino.react_servo_read = function () {
    var a = this.getFieldValue("PIN");
    Blockly.Arduino.definitions_.define_servo = "#include <Servo.h>";
    Blockly.Arduino.definitions_["define_class_servo_" + a] = "Servo __myservo" + a + ";";
    return ["__myservo" + a + ".read()", Blockly.Arduino.ORDER_ATOMIC]
  };
  Blockly.Arduino.react_servo_custom_attach = function () {
    var a = this.getFieldValue("PIN"),
      b = this.getFieldValue("MAX"),
      c = this.getFieldValue("MIN"),
      d = "";
    Blockly.Arduino.definitions_.define_servo = "#include <Servo.h>";
    Blockly.Arduino.definitions_["define_class_servo_" + a] = "Servo __myservo" + a + ";";
    void 0 === Blockly.Arduino.setups_["servo_" + a] ? Blockly.Arduino.setups_["servo_" + a] = "__myservo" + a + ".attach(" + a + "," + c + "," + b + ");" : d = "__myservo" + a + ".attach(" + a + "," + c + "," + b + ");\n";
    return d
  };

  Blockly.Arduino.react_servo_writeus = function () {
    var a = this.getFieldValue("PIN"),
      b = Blockly.Arduino.valueToCode(this, "ANGLE_US", Blockly.Arduino.ORDER_ATOMIC) || "1500";
    Blockly.Arduino.definitions_.define_servo = "#include <Servo.h>";
    Blockly.Arduino.definitions_["define_class_servo_" + a] = "Servo __myservo" + a + ";";
    void 0 === Blockly.Arduino.setups_["servo_" + a] && (Blockly.Arduino.setups_["servo_" + a] = "__myservo" + a + ".attach(" + a + ");");
    return "__myservo" + a + ".writeMicroseconds(" + b + ");\n"
  };


  ///fin Digital

  /* categoria_robot */
  Blockly.Arduino.robot = {};
  Blockly.Arduino.react_playbot = function () {
      var a = Blockly.Arduino.valueToCode(this, "Derecho", Blockly.Arduino.ORDER_ATOMIC);
      var b = Blockly.Arduino.valueToCode(this, "Izquierdo", Blockly.Arduino.ORDER_ATOMIC);
      Blockly.Arduino.definitions_.define_derecho = "int MotorD=" + a + ";"
      Blockly.Arduino.definitions_.define_izquierdo = "int MotorI=" + b + ";"
      Blockly.Arduino.definitions_.define_avanzar =
          "\n void Avanzar() {\n" +
          "\n" +
          "    digitalWrite(4, HIGH);\n" +
          "    digitalWrite(5, LOW);\n" +
          "    digitalWrite(7, LOW);\n" +
          "    digitalWrite(8, HIGH);\n}"
      Blockly.Arduino.definitions_.define_retroceder =
          "\n void Retroceder() {\n" +
          "\n" +
          "    digitalWrite(4, LOW);\n" +
          "    digitalWrite(5, HIGH);\n" +
          "    digitalWrite(7, HIGH);\n" +
          "    digitalWrite(8, LOW);\n}"
      Blockly.Arduino.definitions_.define_izquierda =
          "\n void Izquierda() {\n" +
          "\n" +
          "    digitalWrite(4, LOW);\n" +
          "    digitalWrite(5, HIGH);\n" +
          "    digitalWrite(7, LOW);\n" +
          "    digitalWrite(8, HIGH);\n}"
      Blockly.Arduino.definitions_.define_derecha =
          "\n void Derecha() {\n" +
          "\n" +
          "    digitalWrite(4, HIGH);\n" +
          "    digitalWrite(5, LOW);\n" +
          "    digitalWrite(7, HIGH);\n" +
          "    digitalWrite(8, LOW);\n}"
      Blockly.Arduino.definitions_.define_detener =
          "\n void Detener() {\n" +
          "\n" +
          "    digitalWrite(4, LOW);\n" +
          "    digitalWrite(5, LOW);\n" +
          "    digitalWrite(7, LOW);\n" +
          "    digitalWrite(8, LOW);\n}"
      Blockly.Arduino.setups_.setup_softserial =
          " pinMode(4, OUTPUT);\n" +
          "   pinMode(5, OUTPUT);\n" +
          "   pinMode(7, OUTPUT);\n" +
          "   pinMode(8, OUTPUT);\n" +
          "   pinMode(3, OUTPUT);\n" +
          "   pinMode(6, OUTPUT);\n" +
          "   analogWrite(" + 6 + "," + b + ");\n" +
          "   analogWrite(" + 3 + "," + a + ");\n"
      return "\n"
  
  };
  
  Blockly.Arduino.react_robot_avanzar = function () {
      return "  Avanzar();\n"
  };
  Blockly.Arduino.react_robot_atras = function () {
      return "  Retroceder();\n"
  };
  Blockly.Arduino.react_robot_izquierda = function () {
      return "  Izquierda();\n"
  };
  Blockly.Arduino.react_robot_derecha = function () {
      return "  Derecha();\n"
  };
  
  Blockly.Arduino.react_robot_detener = function () {
      return "  Detener();\n"
  };
  /*categoria linefollower */

  Blockly.Arduino.react_controls_switch = function () {
    var a = 0,
        b = Blockly.Arduino.valueToCode(this, "IF" + a, Blockly.Arduino.ORDER_NONE) || "false",
        c = Blockly.Arduino.statementToCode(this, "DO" + a),
        d = "switch (" + b + ") {\n" + c + "\n}";
    for (a = 1; a <= this.elseifCount_; a++) b = Blockly.Arduino.valueToCode(this, "IF" + a, Blockly.Arduino.ORDER_NONE) || "false", c = Blockly.Arduino.statementToCode(this, "DO" + a), d += " else if (" + b + ") {\n" + c + "}";
    this.elseCount_ && (c = Blockly.Arduino.statementToCode(this, "ELSE"), d += " else {\n" + c + "\n}");
    return d + "\n"
};

Blockly.Arduino.react_controls_case = function () {
    var a = 0,
        b = Blockly.Arduino.valueToCode(this, "establecer", Blockly.Arduino.ORDER_ATOMIC) || "false",
        c = Blockly.Arduino.statementToCode(this, "DO" + a),
        d = "case " + b + ":\n" + c + "\n break;\n";
    for (a = 1; a <= this.elseifCount_; a++) b = Blockly.Arduino.valueToCode(this, "establecer" + a, Blockly.Arduino.ORDER_NONE) || "false", c = Blockly.Arduino.statementToCode(this, "DO" + a), d += " else if (" + b + ") {\n" + c + "}";
    this.elseCount_ && (c = Blockly.Arduino.statementToCode(this, "ELSE"), d += " else {\n" + c + "\n}");
    return d + "\n"
};
Blockly.Arduino.react_SensorDerecha = function () {
  var a = window.parseFloat(this.getFieldValue("NUM"));
  Blockly.Arduino.setups_.seguir = 'pinMode(' + a + ',INPUT);'
  return ["digitalRead(" + a + ")", Blockly.Arduino.ORDER_UNARY_PREFIX, Blockly.Arduino.ORDER_ATOMIC]
};


Blockly.Arduino.react_SensorIzquierda = function () {
  var b = window.parseFloat(this.getFieldValue("NUM"));
  Blockly.Arduino.setups_.seguidor = 'pinMode(' + b + ',INPUT);'
  return ["digitalRead(" + b + ")", Blockly.Arduino.ORDER_UNARY_PREFIX, Blockly.Arduino.ORDER_ATOMIC]
};
//Analogico_Velocidad

Blockly.Arduino.react_Analogico_Velocidad = function () {
    var a = window.parseFloat(this.getFieldValue("NUM3")),
        b = window.parseFloat(this.getFieldValue("NUM6"));
    return "  analogWrite(3," + a + ");\n  analogWrite(6," + b + ");\n"
};


   /*end categoria linefollower*/

   
/*CATEGORY LCD */
Blockly.Arduino.LCD = {};




//setupComucacion();


  Blockly.Arduino.react_lcd_init = function () {
    var
    a = this.getFieldValue("RS"),
    b = this.getFieldValue("Enable"),
    c = this.getFieldValue("RW"),
    d = this.getFieldValue("D4"),
    e = this.getFieldValue("D5"),
    f = this.getFieldValue("D6"),
    g = this.getFieldValue("D7");
    Blockly.Arduino.definitions_.define_lcd = "#include <LiquidCrystal.h>\n"+
                                              "LiquidCrystal lcd"+"("+(a)+","+(b)+","+(c)+","+(d)+","+(e)+","+(f)+","+(g)+")"
return"" ;
  };


  Blockly.Arduino.react_lcd_begin = function () {
    var a = this.getFieldValue("COL"),
        b = this.getFieldValue("ROW");
    Blockly.Arduino.setups_.setup_lcd =
        "lcd.begin(" + a + "," + b + ");\n";
    return ""

};

Blockly.Arduino.react_lcd_print = function () {
  return "lcd.print(" + Blockly.Arduino.valueToCode(this, "PRINT", Blockly.Arduino.ORDER_NONE) + ");\n"
};

Blockly.Arduino.react_lcd_setcursor = function () {
  var a = Blockly.Arduino.valueToCode(this, "COLS", Blockly.Arduino.ORDER_NONE) || "0",
      b = Blockly.Arduino.valueToCode(this, "ROWS", Blockly.Arduino.ORDER_NONE) || "0";
  return "lcd.setCursor(" + a + "," + b + ");\n"
};
Blockly.Arduino.react_lcd_clear = function () {
  return "lcd.clear();\n"
};
Blockly.Arduino.react_lcd_scroll = function () {
  var a = "lcd.";
  return a = 1 == this.getFieldValue("SW") ? a + "autoscroll();\n" : a + "noAutoscroll();\n"
};
//END LCD


//CATEGORY RFID//
Blockly.Arduino.rfid = {};

function setupRFID() {
    Blockly.Arduino.definitions_.define_rfid || (Blockly.Arduino.definitions_.define_hardserial = "#include <SPI.h>\n",
        Blockly.Arduino.definitions_.define_rfid = '#include "ABlocks_MFRC522.h"');
    Blockly.Arduino.definitions_.var_rfid || (Blockly.Arduino.definitions_.var_rfid = "MFRC522 mfrc522(10, 9);\n");
    Blockly.Arduino.setups_.setup_rfid || (Blockly.Arduino.setups_.setup_rfid = "SPI.begin(); mfrc522.PCD_Init();\n");
    Blockly.Arduino.definitions_.define_hardserial =
        'String fnc_rfid_readID(){\n\tString v="";\n\tif(!mfrc522.PICC_ReadCardSerial()) return v;\n\tfor ( uint8_t i = 0; i < mfrc522.uid.size; i++) {\n\t\tuint8_t _baux=(uint8_t)mfrc522.uid.uidByte[i];\n\t\tv+=String((uint8_t)_baux, HEX);\n\t}\n\tmfrc522.PICC_HaltA();\n\treturn v;\n}\n'
}
Blockly.Arduino.react_rfid_init = function () {
    setupRFID();
    var a = this.getFieldValue("CS_PIN"),
        b = this.getFieldValue("RST_PIN");
    Blockly.Arduino.definitions_.var_rfid = "MFRC522 mfrc522(" + a + "," + b + ");\n";
    return ""
};
Blockly.Arduino.react_rfid_newcard = function () {
    setupRFID();
    return ["mfrc522.PICC_IsNewCardPresent()", Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.react_rfid_readuid = function () {
    setupRFID();
    return ["fnc_rfid_readID()", Blockly.Arduino.ORDER_ATOMIC]
};
///RFID FIN

//ULTRA//

Blockly.Arduino.ultrasonic = {};
Blockly.Arduino.react_ultra_setting = function () {
    var a = this.getFieldValue("TRIG"),
        b = this.getFieldValue("ECHO"),
        c = 0;
    Blockly.Arduino.definitions_.define_sonic_timeout = "long duration;\n int distance;\n";
    Blockly.Arduino.setups_["setup_output_" + a] = "pinMode(" + a + ", OUTPUT);";
    Blockly.Arduino.setups_["setup_output_" + b] = "pinMode(" + b + ", INPUT);";
    Blockly.Arduino.definitions_.define_Sonic_Timing = "void Sonic_Timing(){\n\
        \n digitalWrite(" + a + ", LOW);\n delayMicroseconds(2);\n digitalWrite(" + a + ", HIGH);\n delayMicroseconds(10);\n digitalWrite(" + a + ", LOW);\n\
        \n\duration = pulseIn("+ b + ", HIGH);\n distance= duration*0.034/2;\n}"
    return "Sonic_Timing();\n"
};
Blockly.Arduino.react_ultra_distance = function () {
    return ["distance", Blockly.Arduino.ORDER_ATOMIC]
};




//END ULTRA

//END RFID//
  Blockly.Arduino.variablesDynamic = {};

  Blockly.Arduino.variables_get_dynamic = Blockly.Arduino.variables_get;
  Blockly.Arduino.variables_set_dynamic = Blockly.Arduino.variables_set;

 //region bluetooth

 Blockly.Arduino.bluetooth = {};

 function bluetooth_varDef(a, b, d, e) {
   var c = "\n\ int VCC=(" + a + ");\n\ int EN =(" + b + ");\n";
   0 == b && 1 == a && (c = "HardwareSerial & bt_serial=Serial;",
     Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n");

   var f = "SoftwareSerial bt_serial(" + d + "," + e + ");\n\n\n";
   0 == e && 1 == d && (f = "HardwareSerial &bt_serial=Serial;",
     Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n");

   "Arduino Mega" == profile["default"].description && (19 == b && 18 == a

     (c = "HardwareSerial &Serial=Serial1;",
       Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n"),
     17 == b && 16 == a && (c = "HardwareSerial &Serial=Serial2;",
       Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n"),
     15 == b && 14 == a && (c = "HardwareSerial &Serial=Serial3;",
       Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n"));
   "Arduino Mega" == profile["default"].description && (19 == e && 18 == d &&
     (f = "HardwareSerial &BT=Serial1;",
       Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n"),
     17 == d && 16 == e && (f = "HardwareSerial &BT=Serial2;",
       Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n"),
     15 == d && 14 == e && (f = "HardwareSerial &BT=Serial3;",
       Blockly.Arduino.definitions_.define_hardserial = "#include <HardwareSerial.h>\n"));

   return f + c
 }

 function setupComucacion() {
   Blockly.Arduino.definitions_.define_inclserial = "#include <SoftwareSerial.h>\n"
   Blockly.Arduino.setups_.setup_softserial =
     ' \n\
     pinMode(VCC, OUTPUT);\n\
     pinMode(EN, OUTPUT);\n\
     digitalWrite(EN, HIGH);\n\
     delay(500);\n\
     digitalWrite (VCC, HIGH);\n\
   '
 }
 Blockly.Arduino.react_bluetooth_comando = function () {
   var
     a = this.getFieldValue("COMANDO"),
     b = this.getFieldValue("VCC"),
     c = this.getFieldValue("EN"),
     d = this.getFieldValue("BAUD"),
     e = this.getFieldValue("RX"),
     f = this.getFieldValue("TX");

   setupComucacion();
   Blockly.Arduino.definitions_.var_bluetooth = bluetooth_varDef(b, c, e, f);
   Blockly.Arduino.setups_.setup_bluetooth = "\n Serial.begin(" + d + ");" +
     "\n bt_serial.begin(" + a + ");\n" + ' Serial.println ("Esperando comandos AT...");\n';
   return ""
 };
 Blockly.Arduino.react_bluetooth_read_available = function () {

   return ["Serial.available()", Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_serial_print_bluetooth = function () {
   var a = Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC) || "0";
   void 0 == Blockly.Arduino.setups_.setup_serial
   return "bt_serial.write(" + a + ");\n"
 };
 Blockly.Arduino.react_serial_read_bluetooth = function () {
   Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC);
   void 0 == Blockly.Arduino.setups_.setup_serial
   return ["Serial.read()", Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_bluetooth_read = function () {

   return ["bt_serial.available()", Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_serial_write = function () {
   var a = Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC) || "0";
   void 0 == Blockly.Arduino.setups_.setup_serial
   return "Serial.write(" + a + ");\n"
 };
 Blockly.Arduino.react_serial_bt_read = function () {
   Blockly.Arduino.valueToCode(this, "CONTENT", Blockly.Arduino.ORDER_ATOMIC);
   void 0 == Blockly.Arduino.setups_.setup_serial
   return ["bt_serial.read()", Blockly.Arduino.ORDER_ATOMIC]
 };
 //end region bluethoo

 //sensores//


 Blockly.Arduino.sensor = {};

 Blockly.Arduino.react_sensor_potentiometer = function () {
     var a = this.getFieldValue("PIN");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     var b = "map(analogRead(" + a + "),0,1023,0,100)";
     "RAW" == this.getFieldValue("RANGE") && (b = "analogRead(" + a + ")");
     return [b, Blockly.Arduino.ORDER_ATOMIC]
 };
 
 Blockly.Arduino.sensor_potentiometer_EP = Blockly.Arduino.sensor_potentiometer;
 Blockly.Arduino.react_sensor_button = function () {
     var a = this.getFieldValue("PIN"),
         b = this.getFieldValue("INVERT");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     a = "digitalRead(" + a + ")";
     "TRUE" == b && (a = "(!" + a + ")");
     return [a, Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_sensor_button_debounced = function () {
     var a = this.getFieldValue("PIN"),
         b = this.getFieldValue("STATUS"),
         c = this.getFieldValue("INVERT");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     Blockly.Arduino.definitions_.define_button_debounced = '#include "ABlocks_Button.h"';
     Blockly.Arduino.definitions_["var_button_debounced_" + a] = "Button button_debounced_" + a + "(" + a + ",50);\n";
     var d = "";
     "pressed" == b && (d = "button_debounced_" + a + ".pressed()");
     "released" == b && (d = "button_debounced_" + a + ".released()");
     "TRUE" == c && (d = "(!" + d + ")");
     return [d, Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_sensor_touch = function () {
     var a = this.getFieldValue("PIN");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     return ["digitalRead(" + a + ")", Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_sensor_pir = function () {
     var a = this.getFieldValue("PIN");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     return ["digitalRead(" + a + ")", Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_sensor_dht11 = function () {
     var a = this.getFieldValue("PIN"),
         b = this.getFieldValue("TYPE");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     Blockly.Arduino.setups_["setup_dht11_" + a] = "dht" + a + ".begin();";
     Blockly.Arduino.definitions_.define_dht11 = '#include "ABlocks_DHT.h"';
     Blockly.Arduino.definitions_["var_dht11_" + a] = "DHT dht" + a + "(" + a + ",DHT11);";
     return ["temperature" == b ? "dht" + a + ".readTemperature()" : "dht" + a + ".readHumidity()", Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_sensor_linetracking = function () {
     var a = this.getFieldValue("PIN");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     return ["digitalRead(" + a + ")", Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_sensor_gas = function () {
     var a = this.getFieldValue("PIN");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     var b = "map(analogRead(" + a + "),0,1023,0,100)";
     "RAW" == this.getFieldValue("RANGE") && (b = "analogRead(" + a + ")");
     return [b, Blockly.Arduino.ORDER_ATOMIC]
 };
 Blockly.Arduino.react_sensor_lm35 = function () {
     var a = this.getFieldValue("PIN");
     Blockly.Arduino.setups_["setup_input_" + a] = "pinMode(" + a + ", INPUT);";
     return ["(analogRead(" + a + ")*0.48828125)", Blockly.Arduino.ORDER_ATOMIC]
 };
 
 function setupColorSensorTCS34725() {
     Blockly.Arduino.definitions_.define_wire = "#include <Wire.h>";
     Blockly.Arduino.definitions_.define_TCS34725 = '#include "Adafruit_TCS34725.h"\n';
     Blockly.Arduino.definitions_.define_colorconverter = '#include "ColorConverterLib.h"\n';
     Blockly.Arduino.definitions_.var_TCS34725 = "Adafruit_TCS34725 tcs34725 = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_1X);";
     Blockly.Arduino.definitions_.var_TCS34725_r = "double  tcs34725_r=0;";
     Blockly.Arduino.definitions_.var_TCS34725_g =
         "double  tcs34725_g=0;";
     Blockly.Arduino.definitions_.var_TCS34725_b = "double  tcs34725_b=0;";
     Blockly.Arduino.definitions_.var_TCS34725_clear = "uint16_t  tcs34725_clear=0;";
     Blockly.Arduino.definitions_.var_TCS34725_h = "double  tcs34725_h=0;";
     Blockly.Arduino.definitions_.var_TCS34725_s = "double  tcs34725_s=0;";
     Blockly.Arduino.definitions_.var_TCS34725_v = "double  tcs34725_v=0;";
     Blockly.Arduino.setups_.setup_TCS34725 = "tcs34725.begin();";
     Blockly.Arduino.definitions_.define_fnc_bt_serial_namepin = "void fnc_tcs34725_capturecolor()\n{\n\tuint16_t tcs_red, tcs_green, tcs_blue;\n\ttcs34725.getRawData(&tcs_red, &tcs_green, &tcs_blue, &tcs34725_clear);\n\tif (tcs34725_clear == 0) {\n\t\ttcs34725_r=tcs34725_g=tcs34725_b=0;\n\t\treturn;\n\t}\n\ttcs34725_r = ((float)tcs_red / (float)tcs34725_clear * 255.0);\n\ttcs34725_g = ((float)tcs_green / (float)tcs34725_clear * 255.0);\n\ttcs34725_b = ((float)tcs_blue / (float)tcs34725_clear * 255.0);\n\tColorConverter::RgbToHsv(static_cast<uint8_t>(tcs34725_r), static_cast<uint8_t>(tcs34725_g), static_cast<uint8_t>(tcs34725_b), tcs34725_h, tcs34725_s,tcs34725_v);\n\ttcs34725_h=tcs34725_h*360;\n\ttcs34725_s=tcs34725_s*100;\n\ttcs34725_v=tcs34725_v*100;\n}\n"
 }
 Blockly.Arduino.react_sensor_color_tcs34725_value = function () {
     setupColorSensorTCS34725();
     var a = this.getFieldValue("TYPE"),
         b = "";
     "0" == a && (b = "tcs34725_r");
     "1" == a && (b = "tcs34725_g");
     "2" == a && (b = "tcs34725_b");
     "3" == a && (b = "tcs34725_clear");
     "4" == a && (b = "tcs34725_h");
     "5" == a && (b = "tcs34725_s");
     "6" == a && (b = "tcs34725_v");
     return [b, Blockly.Arduino.ORDER_ATOMIC]
 };
 
 
 Blockly.Arduino.react_sensor_luz = function () {
     Blockly.Arduino.setups_ = ["pinMode(" + this.getFieldValue("PIN") + ",INPUT" + ");"];
     return ["analogRead(" + this.getFieldValue("PIN") + ")", Blockly.Arduino.ORDER_ATOMIC]
 };
 //Sensores fin //




 //end sensores//

  return Blockly.Arduino;
}));
