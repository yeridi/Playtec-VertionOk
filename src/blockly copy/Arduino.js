/* eslint-disable */
/*-----Variables y Librerias
	Blockly.Arduino.definitions_
*/
/*-----setup()
 	Blockly.Arduino.setups_ 
*/
/*-----loop()
	return""
*/
/* eslint-disable */
;
(function (root, factory) {
  if (typeof define === 'function' && define.amd) { // AMD
    define(['./core'], factory);
  } else if (typeof exports === 'object') { // Node.js
    module.exports = factory(require('./core'));
  } else { // Browser
    root.Blockly.Arduino = factory(root.Blockly);
  }
}(this, function (Blockly) {
  // Do not edit this file; automatically generated by build.py.
  'use strict';


  Blockly.Arduino = new Blockly.Generator("Arduino");
  Blockly.Arduino.addReservedWords("Blockly,break,case,catch,continue,debugger,default,delete,do,else,finally,for,function,if,in,instanceof,new,return,switch,this,throw,try,typeof,var,void,while,with,class,enum,export,extends,import,super,implements,interface,let,package,private,protected,public,static,yield,const,null,true,false,Array,ArrayBuffer,Boolean,Date,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Error,eval,EvalError,Float32Array,Float64Array,Function,Infinity,Int16Array,Int32Array,Int8Array,isFinite,isNaN,Iterator,JSON,Math,NaN,Number,Object,parseFloat,parseInt,RangeError,ReferenceError,RegExp,StopIteration,String,SyntaxError,TypeError,Uint16Array,Uint32Array,Uint8Array,Uint8ClampedArray,undefined,uneval,URIError,applicationCache,closed,Components,content,_content,controllers,crypto,defaultStatus,dialogArguments,directories,document,frameElement,frames,fullScreen,globalStorage,history,innerHeight,innerWidth,length,location,locationbar,localStorage,menubar,messageManager,mozAnimationStartTime,mozInnerScreenX,mozInnerScreenY,mozPaintCount,name,navigator,opener,outerHeight,outerWidth,pageXOffset,pageYOffset,parent,performance,personalbar,pkcs11,returnValue,screen,screenX,screenY,scrollbars,scrollMaxX,scrollMaxY,scrollX,scrollY,self,sessionStorage,sidebar,status,statusbar,toolbar,top,URL,window,addEventListener,alert,atob,back,blur,btoa,captureEvents,clearImmediate,clearInterval,clearTimeout,close,confirm,disableExternalCapture,dispatchEvent,dump,enableExternalCapture,escape,find,focus,forward,GeckoActiveXObject,getAttention,getAttentionWithCycleCount,getComputedStyle,getSelection,home,matchMedia,maximize,minimize,moveBy,moveTo,mozRequestAnimationFrame,open,openDialog,postMessage,print,prompt,QueryInterface,releaseEvents,removeEventListener,resizeBy,resizeTo,restore,routeEvent,scroll,scrollBy,scrollByLines,scrollByPages,scrollTo,setCursor,setImmediate,setInterval,setResizable,setTimeout,showModalDialog,sizeToContent,stop,unescape,updateCommands,XPCNativeWrapper,XPCSafeJSObjectWrapper,onabort,onbeforeunload,onblur,onchange,onclick,onclose,oncontextmenu,ondevicemotion,ondeviceorientation,ondragdrop,onerror,onfocus,onhashchange,onkeydown,onkeypress,onkeyup,onload,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,onmozbeforepaint,onpaint,onpopstate,onreset,onresize,onscroll,onselect,onsubmit,onunload,onpageshow,onpagehide,Image,Option,Worker,Event,Range,File,FileReader,Blob,BlobBuilder,Attr,CDATASection,CharacterData,Comment,console,DocumentFragment,DocumentType,DomConfiguration,DOMError,DOMErrorHandler,DOMException,DOMImplementation,DOMImplementationList,DOMImplementationRegistry,DOMImplementationSource,DOMLocator,DOMObject,DOMString,DOMStringList,DOMTimeStamp,DOMUserData,Entity,EntityReference,MediaQueryList,MediaQueryListListener,NameList,NamedNodeMap,Node,NodeFilter,NodeIterator,NodeList,Notation,Plugin,PluginArray,ProcessingInstruction,SharedWorker,Text,TimeRanges,Treewalker,TypeInfo,UserDataHandler,Worker,WorkerGlobalScope,HTMLDocument,HTMLElement,HTMLAnchorElement,HTMLAppletElement,HTMLAudioElement,HTMLAreaElement,HTMLBaseElement,HTMLBaseFontElement,HTMLBodyElement,HTMLBRElement,HTMLButtonElement,HTMLCanvasElement,HTMLDirectoryElement,HTMLDivElement,HTMLDListElement,HTMLEmbedElement,HTMLFieldSetElement,HTMLFontElement,HTMLFormElement,HTMLFrameElement,HTMLFrameSetElement,HTMLHeadElement,HTMLHeadingElement,HTMLHtmlElement,HTMLHRElement,HTMLIFrameElement,HTMLImageElement,HTMLInputElement,HTMLKeygenElement,HTMLLabelElement,HTMLLIElement,HTMLLinkElement,HTMLMapElement,HTMLMenuElement,HTMLMetaElement,HTMLModElement,HTMLObjectElement,HTMLOListElement,HTMLOptGroupElement,HTMLOptionElement,HTMLOutputElement,HTMLParagraphElement,HTMLParamElement,HTMLPreElement,HTMLQuoteElement,HTMLScriptElement,HTMLSelectElement,HTMLSourceElement,HTMLSpanElement,HTMLStyleElement,HTMLTableElement,HTMLTableCaptionElement,HTMLTableCellElement,HTMLTableDataCellElement,HTMLTableHeaderCellElement,HTMLTableColElement,HTMLTableRowElement,HTMLTableSectionElement,HTMLTextAreaElement,HTMLTimeElement,HTMLTitleElement,HTMLTrackElement,HTMLUListElement,HTMLUnknownElement,HTMLVideoElement,HTMLCanvasElement,CanvasRenderingContext2D,CanvasGradient,CanvasPattern,TextMetrics,ImageData,CanvasPixelArray,HTMLAudioElement,HTMLVideoElement,NotifyAudioAvailableEvent,HTMLCollection,HTMLAllCollection,HTMLFormControlsCollection,HTMLOptionsCollection,HTMLPropertiesCollection,DOMTokenList,DOMSettableTokenList,DOMStringMap,RadioNodeList,SVGDocument,SVGElement,SVGAElement,SVGAltGlyphElement,SVGAltGlyphDefElement,SVGAltGlyphItemElement,SVGAnimationElement,SVGAnimateElement,SVGAnimateColorElement,SVGAnimateMotionElement,SVGAnimateTransformElement,SVGSetElement,SVGCircleElement,SVGClipPathElement,SVGColorProfileElement,SVGCursorElement,SVGDefsElement,SVGDescElement,SVGEllipseElement,SVGFilterElement,SVGFilterPrimitiveStandardAttributes,SVGFEBlendElement,SVGFEColorMatrixElement,SVGFEComponentTransferElement,SVGFECompositeElement,SVGFEConvolveMatrixElement,SVGFEDiffuseLightingElement,SVGFEDisplacementMapElement,SVGFEDistantLightElement,SVGFEFloodElement,SVGFEGaussianBlurElement,SVGFEImageElement,SVGFEMergeElement,SVGFEMergeNodeElement,SVGFEMorphologyElement,SVGFEOffsetElement,SVGFEPointLightElement,SVGFESpecularLightingElement,SVGFESpotLightElement,SVGFETileElement,SVGFETurbulenceElement,SVGComponentTransferFunctionElement,SVGFEFuncRElement,SVGFEFuncGElement,SVGFEFuncBElement,SVGFEFuncAElement,SVGFontElement,SVGFontFaceElement,SVGFontFaceFormatElement,SVGFontFaceNameElement,SVGFontFaceSrcElement,SVGFontFaceUriElement,SVGForeignObjectElement,SVGGElement,SVGGlyphElement,SVGGlyphRefElement,SVGGradientElement,SVGLinearGradientElement,SVGRadialGradientElement,SVGHKernElement,SVGImageElement,SVGLineElement,SVGMarkerElement,SVGMaskElement,SVGMetadataElement,SVGMissingGlyphElement,SVGMPathElement,SVGPathElement,SVGPatternElement,SVGPolylineElement,SVGPolygonElement,SVGRectElement,SVGScriptElement,SVGStopElement,SVGStyleElement,SVGSVGElement,SVGSwitchElement,SVGSymbolElement,SVGTextElement,SVGTextPathElement,SVGTitleElement,SVGTRefElement,SVGTSpanElement,SVGUseElement,SVGViewElement,SVGVKernElement,SVGAngle,SVGColor,SVGICCColor,SVGElementInstance,SVGElementInstanceList,SVGLength,SVGLengthList,SVGMatrix,SVGNumber,SVGNumberList,SVGPaint,SVGPoint,SVGPointList,SVGPreserveAspectRatio,SVGRect,SVGStringList,SVGTransform,SVGTransformList,SVGAnimatedAngle,SVGAnimatedBoolean,SVGAnimatedEnumeration,SVGAnimatedInteger,SVGAnimatedLength,SVGAnimatedLengthList,SVGAnimatedNumber,SVGAnimatedNumberList,SVGAnimatedPreserveAspectRatio,SVGAnimatedRect,SVGAnimatedString,SVGAnimatedTransformList,SVGPathSegList,SVGPathSeg,SVGPathSegArcAbs,SVGPathSegArcRel,SVGPathSegClosePath,SVGPathSegCurvetoCubicAbs,SVGPathSegCurvetoCubicRel,SVGPathSegCurvetoCubicSmoothAbs,SVGPathSegCurvetoCubicSmoothRel,SVGPathSegCurvetoQuadraticAbs,SVGPathSegCurvetoQuadraticRel,SVGPathSegCurvetoQuadraticSmoothAbs,SVGPathSegCurvetoQuadraticSmoothRel,SVGPathSegLinetoAbs,SVGPathSegLinetoHorizontalAbs,SVGPathSegLinetoHorizontalRel,SVGPathSegLinetoRel,SVGPathSegLinetoVerticalAbs,SVGPathSegLinetoVerticalRel,SVGPathSegMovetoAbs,SVGPathSegMovetoRel,ElementTimeControl,TimeEvent,SVGAnimatedPathData,SVGAnimatedPoints,SVGColorProfileRule,SVGCSSRule,SVGExternalResourcesRequired,SVGFitToViewBox,SVGLangSpace,SVGLocatable,SVGRenderingIntent,SVGStylable,SVGTests,SVGTextContentElement,SVGTextPositioningElement,SVGTransformable,SVGUnitTypes,SVGURIReference,SVGViewSpec,SVGZoomAndPan");
  Blockly.Arduino.ORDER_ATOMIC = 0;
  Blockly.Arduino.ORDER_NEW = 1.1;
  Blockly.Arduino.ORDER_MEMBER = 1.2;
  Blockly.Arduino.ORDER_FUNCTION_CALL = 2;
  Blockly.Arduino.ORDER_INCREMENT = 3;
  Blockly.Arduino.ORDER_DECREMENT = 3;
  Blockly.Arduino.ORDER_BITWISE_NOT = 4.1;
  Blockly.Arduino.ORDER_UNARY_PLUS = 4.2;
  Blockly.Arduino.ORDER_UNARY_NEGATION = 4.3;
  Blockly.Arduino.ORDER_LOGICAL_NOT = 4.4;
  Blockly.Arduino.ORDER_TYPEOF = 4.5;
  Blockly.Arduino.ORDER_VOID = 4.6;
  Blockly.Arduino.ORDER_DELETE = 4.7;
  Blockly.Arduino.ORDER_AWAIT = 4.8;
  Blockly.Arduino.ORDER_EXPONENTIATION = 5;
  Blockly.Arduino.ORDER_MULTIPLICATION = 5.1;
  Blockly.Arduino.ORDER_DIVISION = 5.2;
  Blockly.Arduino.ORDER_MODULUS = 5.3;
  Blockly.Arduino.ORDER_SUBTRACTION = 6.1;
  Blockly.Arduino.ORDER_ADDITION = 6.2;
  Blockly.Arduino.ORDER_BITWISE_SHIFT = 7;
  Blockly.Arduino.ORDER_RELATIONAL = 8;
  Blockly.Arduino.ORDER_IN = 8;
  Blockly.Arduino.ORDER_INSTANCEOF = 8;
  Blockly.Arduino.ORDER_EQUALITY = 9;
  Blockly.Arduino.ORDER_BITWISE_AND = 10;
  Blockly.Arduino.ORDER_BITWISE_XOR = 11;
  Blockly.Arduino.ORDER_BITWISE_OR = 12;
  Blockly.Arduino.ORDER_LOGICAL_AND = 13;
  Blockly.Arduino.ORDER_LOGICAL_OR = 14;
  Blockly.Arduino.ORDER_CONDITIONAL = 15;
  Blockly.Arduino.ORDER_ASSIGNMENT = 16;
  Blockly.Arduino.ORDER_YIELD = 17;
  Blockly.Arduino.ORDER_COMMA = 18;
  Blockly.Arduino.ORDER_NONE = 99;
  Blockly.Arduino.ORDER_OVERRIDES = [
    [Blockly.Arduino.ORDER_FUNCTION_CALL, Blockly.Arduino.ORDER_MEMBER],
    [Blockly.Arduino.ORDER_FUNCTION_CALL, Blockly.Arduino.ORDER_FUNCTION_CALL],
    [Blockly.Arduino.ORDER_MEMBER, Blockly.Arduino.ORDER_MEMBER],
    [Blockly.Arduino.ORDER_MEMBER, Blockly.Arduino.ORDER_FUNCTION_CALL],
    [Blockly.Arduino.ORDER_LOGICAL_NOT, Blockly.Arduino.ORDER_LOGICAL_NOT],
    [Blockly.Arduino.ORDER_MULTIPLICATION, Blockly.Arduino.ORDER_MULTIPLICATION],
    [Blockly.Arduino.ORDER_ADDITION, Blockly.Arduino.ORDER_ADDITION],
    [Blockly.Arduino.ORDER_LOGICAL_AND, Blockly.Arduino.ORDER_LOGICAL_AND],
    [Blockly.Arduino.ORDER_LOGICAL_OR, Blockly.Arduino.ORDER_LOGICAL_OR]
  ];
  Blockly.Arduino.init = function (a) {
    Blockly.Arduino.definitions_ = Object.create(null);
    Blockly.Arduino.functionNames_ = Object.create(null);
    Blockly.Arduino.variableDB_ ? Blockly.Arduino.variableDB_.reset() : Blockly.Arduino.variableDB_ = new Blockly.Names(Blockly.Arduino.RESERVED_WORDS_);
    Blockly.Arduino.variableDB_.setVariableMap(a.getVariableMap());
    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.Arduino.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE));
    a = Blockly.Variables.allUsedVarModels(a);
    for (d = 0; d < a.length; d++) b.push(Blockly.Arduino.variableDB_.getName(a[d].getId(), Blockly.Variables.NAME_TYPE));
    b.length && (Blockly.Arduino.definitions_.variables = "var " + b.join(", ") + ";")
  };

  Blockly.Arduino.finish = function (a) {
    a = "  " + a.replace(/\n/g, "\n");
    a = a.replace(/\n\s+$/, "\n");
    a = "void loop() \n{\n" + a + "\n}";
    var b = [],
      c = [];
    for (e in Blockly.Arduino.definitions_) {
      var d = Blockly.Arduino.definitions_[e];
      d.match(/^#include/) ? b.push(d) : c.push(d)
    }
    d = [];
    for (e in Blockly.Arduino.setups_) d.push(Blockly.Arduino.setups_[e]);
    var e = new Date((new Date).getTime());
    b = b.join("\n") + "\n\n" + c.join("\n") + "\n\nvoid setup() \n{\n  " + d.join("\n  ") + "\n}\n\n";
    b = b.replace(/\n\n+/g, "\n\n").replace(/\n*$/, "\n\n\n") +
      a;
    return b = "/*\n * Código generado usando PlayTecDuino\n */\n\n" + b
  };

  Blockly.Arduino.scrubNakedValue = function (a) {
    return a + ";\n"
  };

  Blockly.Arduino.quote_ = function (a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/'/g, "\\'");
    return "'" + a + "'"
  };

  Blockly.Arduino.quote2 = function(a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/\$/g, "\\$").replace(/'/g, "\\'");
    return '"' + a + '"'
};

  Blockly.Arduino.multiline_quote_ = function (a) {
    return a.split(/\n/g).map(Blockly.Arduino.quote_).join(" + '\\n' +\n")
  };

  Blockly.Arduino.scrub_ = function (a, b, c) {
    var d = "";
    if (!a.outputConnection || !a.outputConnection.targetConnection) {
      var e = a.getCommentText();

      e && (e = Blockly.utils.string.wrap(e, Blockly.Arduino.COMMENT_WRAP - 3), d += Blockly.Arduino.prefixLines(e + "\n", "// "));
      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.Arduino.allNestedComments(e)) && (d += Blockly.Arduino.prefixLines(e, "// "))
    }
    a = a.nextConnection && a.nextConnection.targetBlock();

    c = c ? "" : Blockly.Arduino.blockToCode(a);
    return d + b + c
  };
  Blockly.Arduino.react_text = function() {
    return [Blockly.Arduino.quote2(this.getFieldValue("TEXT")), Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.react_textapos = {};
Blockly.Arduino.react_textapos = function() {
    return [Blockly.Arduino.quote_(this.getFieldValue("TEXT")), Blockly.Arduino.ORDER_ATOMIC]
};

  Blockly.Arduino.getAdjusted = function (a, b, c, d, e) {
    c = c || 0;
    e = e || Blockly.Arduino.ORDER_NONE;
    a.workspace.options.oneBasedIndex && c--;
    var f = a.workspace.options.oneBasedIndex ? "1" : "0";
    a = 0 < c ? Blockly.Arduino.valueToCode(a, b, Blockly.Arduino.ORDER_ADDITION) || f : 0 > c ? Blockly.Arduino.valueToCode(a, b, Blockly.Arduino.ORDER_SUBTRACTION) || f : d ? Blockly.Arduino.valueToCode(a, b, Blockly.Arduino.ORDER_UNARY_NEGATION) || f : Blockly.Arduino.valueToCode(a, b, e) || f;
    if (Blockly.isNumber(a)) a = Number(a) + c, d && (a = -a);
    else {
      if (0 < c) {
        a = a + " + " + c;
        var g = Blockly.Arduino.ORDER_ADDITION
      } else 0 > c && (a = a + " - " + -c, g = Blockly.Arduino.ORDER_SUBTRACTION);
      d && (a = c ? "-(" + a + ")" : "-" + a, g = Blockly.Arduino.ORDER_UNARY_NEGATION);
      g = Math.floor(g);
      e = Math.floor(e);
      g && e >= g && (a = "(" + a + ")")
    }
    return a
  };

  Blockly.Arduino.colour = {};

  Blockly.Arduino.colour_picker = function (a) {
    return [Blockly.Arduino.quote_(a.getFieldValue("COLOUR")), Blockly.Arduino.ORDER_ATOMIC]
  };

  Blockly.Arduino.colour_random = function (a) {
    return [Blockly.Arduino.provideFunction_("colourRandom", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "() {", "  var num = Math.floor(Math.random() * Math.pow(2, 24));", "  return '#' + ('00000' + num.toString(16)).substr(-6);", "}"]) + "()", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.colour_rgb = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "RED", Blockly.Arduino.ORDER_COMMA) || 0,
      c = Blockly.Arduino.valueToCode(a, "GREEN", Blockly.Arduino.ORDER_COMMA) || 0;
    a = Blockly.Arduino.valueToCode(a, "BLUE", Blockly.Arduino.ORDER_COMMA) || 0;
    return [Blockly.Arduino.provideFunction_("colourRgb", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(r, g, b) {", "  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;", "  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;", "  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;", "  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);", "  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);", "  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.colour_blend = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "COLOUR1", Blockly.Arduino.ORDER_COMMA) || "'#000000'",
      c = Blockly.Arduino.valueToCode(a, "COLOUR2", Blockly.Arduino.ORDER_COMMA) || "'#000000'";
    a = Blockly.Arduino.valueToCode(a, "RATIO", Blockly.Arduino.ORDER_COMMA) || .5;
    return [Blockly.Arduino.provideFunction_("colourBlend", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(c1, c2, ratio) {", "  ratio = Math.max(Math.min(Number(ratio), 1), 0);", "  var r1 = parseInt(c1.substring(1, 3), 16);", "  var g1 = parseInt(c1.substring(3, 5), 16);", "  var b1 = parseInt(c1.substring(5, 7), 16);", "  var r2 = parseInt(c2.substring(1, 3), 16);", "  var g2 = parseInt(c2.substring(3, 5), 16);", "  var b2 = parseInt(c2.substring(5, 7), 16);", "  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);", "  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);", "  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);", "  r = ('0' + (r || 0).toString(16)).slice(-2);", "  g = ('0' + (g || 0).toString(16)).slice(-2);", "  b = ('0' + (b || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.math = {};

  Blockly.Arduino.math_number = function (a) {
    a = Number(a.getFieldValue("NUM"));
    return [a, 0 <= a ? Blockly.Arduino.ORDER_ATOMIC : Blockly.Arduino.ORDER_UNARY_NEGATION]
  };

  Blockly.Arduino.math_arithmetic = function (a) {
    var b = {
      ADD: [" + ", Blockly.Arduino.ORDER_ADDITION],
      MINUS: [" - ", Blockly.Arduino.ORDER_SUBTRACTION],
      MULTIPLY: [" * ", Blockly.Arduino.ORDER_MULTIPLICATION],
      DIVIDE: [" / ", Blockly.Arduino.ORDER_DIVISION],
      POWER: [null, Blockly.Arduino.ORDER_COMMA]
    }[a.getFieldValue("OP")],
      c = b[0];
    b = b[1];
    var d = Blockly.Arduino.valueToCode(a, "A", b) || "0";
    a = Blockly.Arduino.valueToCode(a, "B", b) || "0";
    return c ? [d + c + a, b] : ["Math.pow(" + d + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.math_single = function (a) {
    var b = a.getFieldValue("OP");
    if ("NEG" == b) return a = Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_UNARY_NEGATION) || "0", "-" == a[0] && (a = " " + a), ["-" + a, Blockly.Arduino.ORDER_UNARY_NEGATION];
    a = "SIN" == b || "COS" == b || "TAN" == b ? Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_DIVISION) || "0" : Blockly.Arduino.valueToCode(a, "NUM", Blockly.Arduino.ORDER_NONE) || "0";
    switch (b) {
      case "ABS":
        var c = "Math.abs(" + a + ")";
        break;
      case "ROOT":
        c = "Math.sqrt(" + a + ")";
        break;
      case "LN":
        c = "Math.log(" + a + ")";
        break;
      case "EXP":
        c = "Math.exp(" + a + ")";
        break;
      case "POW10":
        c = "Math.pow(10," + a + ")";
        break;
      case "ROUND":
        c = "Math.round(" + a + ")";
        break;
      case "ROUNDUP":
        c = "Math.ceil(" + a + ")";
        break;
      case "ROUNDDOWN":
        c = "Math.floor(" + a + ")";
        break;
      case "SIN":
        c = "Math.sin(" + a + " / 180 * Math.PI)";
        break;
      case "COS":
        c = "Math.cos(" + a + " / 180 * Math.PI)";
        break;
      case "TAN":
        c = "Math.tan(" + a + " / 180 * Math.PI)"
    }
    if (c) return [c, Blockly.Arduino.ORDER_FUNCTION_CALL];
    switch (b) {
      case "LOG10":
        c = "Math.log(" + a + ") / Math.log(10)";
        break;
      case "ASIN":
        c = "Math.asin(" + a + ") / Math.PI * 180";
        break;
      case "ACOS":
        c = "Math.acos(" + a + ") / Math.PI * 180";
        break;
      case "ATAN":
        c = "Math.atan(" + a + ") / Math.PI * 180";
        break;
      default:
        throw Error("Unknown math operator: " + b);
    }
    return [c, Blockly.Arduino.ORDER_DIVISION]
  };

  Blockly.Arduino.math_constant = function (a) {
    return {
      PI: ["Math.PI", Blockly.Arduino.ORDER_MEMBER],
      E: ["Math.E", Blockly.Arduino.ORDER_MEMBER],
      GOLDEN_RATIO: ["(1 + Math.sqrt(5)) / 2", Blockly.Arduino.ORDER_DIVISION],
      SQRT2: ["Math.SQRT2", Blockly.Arduino.ORDER_MEMBER],
      SQRT1_2: ["Math.SQRT1_2", Blockly.Arduino.ORDER_MEMBER],
      INFINITY: ["Infinity", Blockly.Arduino.ORDER_ATOMIC]
    }[a.getFieldValue("CONSTANT")]
  };

  Blockly.Arduino.math_number_property = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "NUMBER_TO_CHECK", Blockly.Arduino.ORDER_MODULUS) || "0",
      c = a.getFieldValue("PROPERTY");
    if ("PRIME" == c) return [Blockly.Arduino.provideFunction_("mathIsPrime", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(n) {", "  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods", "  if (n == 2 || n == 3) {", "    return true;", "  }", "  // False if n is NaN, negative, is 1, or not whole.", "  // And false if n is divisible by 2 or 3.", "  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {", "    return false;", "  }", "  // Check all the numbers of form 6k +/- 1, up to sqrt(n).", "  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {", "    if (n % (x - 1) == 0 || n % (x + 1) == 0) {", "      return false;", "    }", "  }", "  return true;", "}"]) + "(" + b + ")", Blockly.Arduino.ORDER_FUNCTION_CALL];
    switch (c) {
      case "EVEN":
        var d = b + " % 2 == 0";
        break;
      case "ODD":
        d = b + " % 2 == 1";
        break;
      case "WHOLE":
        d = b + " % 1 == 0";
        break;
      case "POSITIVE":
        d =
          b + " > 0";
        break;
      case "NEGATIVE":
        d = b + " < 0";
        break;
      case "DIVISIBLE_BY":
        a = Blockly.Arduino.valueToCode(a, "DIVISOR", Blockly.Arduino.ORDER_MODULUS) || "0", d = b + " % " + a + " == 0"
    }
    return [d, Blockly.Arduino.ORDER_EQUALITY]
  };

  Blockly.Arduino.math_change = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "DELTA", Blockly.Arduino.ORDER_ADDITION) || "0";
    a = Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return a + " = (typeof " + a + " == 'number' ? " + a + " : 0) + " + b + ";\n"
  };

  Blockly.Arduino.math_round = Blockly.Arduino.math_single;
  Blockly.Arduino.math_trig = Blockly.Arduino.math_single;
  Blockly.Arduino.math_on_list = function (a) {
    var b = a.getFieldValue("OP");
    switch (b) {
      case "SUM":
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_MEMBER) || "[]";
        a += ".reduce(function(x, y) {return x + y;})";
        break;
      case "MIN":
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_COMMA) || "[]";
        a = "Math.min.apply(null, " + a + ")";
        break;
      case "MAX":
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_COMMA) || "[]";
        a = "Math.max.apply(null, " + a + ")";
        break;
      case "AVERAGE":
        b = Blockly.Arduino.provideFunction_("mathMean", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  return myList.reduce(function(x, y) {return x + y;}) / myList.length;", "}"]);
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]";
        a = b + "(" + a + ")";
        break;
      case "MEDIAN":
        b = Blockly.Arduino.provideFunction_("mathMedian", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  var localList = myList.filter(function (x) {return typeof x == 'number';});", "  if (!localList.length) return null;", "  localList.sort(function(a, b) {return b - a;});", "  if (localList.length % 2 == 0) {", "    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;", "  } else {", "    return localList[(localList.length - 1) / 2];", "  }", "}"]);
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]";
        a = b + "(" + a + ")";
        break;
      case "MODE":
        b = Blockly.Arduino.provideFunction_("mathModes", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(values) {", "  var modes = [];", "  var counts = [];", "  var maxCount = 0;", "  for (var i = 0; i < values.length; i++) {", "    var value = values[i];", "    var found = false;", "    var thisCount;", "    for (var j = 0; j < counts.length; j++) {", "      if (counts[j][0] === value) {", "        thisCount = ++counts[j][1];", "        found = true;", "        break;", "      }", "    }", "    if (!found) {", "      counts.push([value, 1]);", "      thisCount = 1;", "    }", "    maxCount = Math.max(thisCount, maxCount);", "  }", "  for (var j = 0; j < counts.length; j++) {", "    if (counts[j][1] == maxCount) {", "        modes.push(counts[j][0]);", "    }", "  }", "  return modes;", "}"]);
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]";
        a = b + "(" + a + ")";
        break;
      case "STD_DEV":
        b = Blockly.Arduino.provideFunction_("mathStandardDeviation", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(numbers) {", "  var n = numbers.length;", "  if (!n) return null;", "  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;", "  var variance = 0;", "  for (var j = 0; j < n; j++) {", "    variance += Math.pow(numbers[j] - mean, 2);", "  }", "  variance = variance / n;", "  return Math.sqrt(variance);", "}"]);
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]";
        a = b + "(" + a + ")";
        break;
      case "RANDOM":
        b = Blockly.Arduino.provideFunction_("mathRandomList", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(list) {", "  var x = Math.floor(Math.random() * list.length);", "  return list[x];", "}"]);
        a = Blockly.Arduino.valueToCode(a, "LIST", Blockly.Arduino.ORDER_NONE) || "[]";
        a = b + "(" + a + ")";
        break;
      default:
        throw Error("Unknown operator: " + b);
    }
    return [a, Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.math_modulo = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "DIVIDEND", Blockly.Arduino.ORDER_MODULUS) || "0";
    a = Blockly.Arduino.valueToCode(a, "DIVISOR", Blockly.Arduino.ORDER_MODULUS) || "0";
    return [b + " % " + a, Blockly.Arduino.ORDER_MODULUS]
  };

  Blockly.Arduino.math_constrain = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "VALUE", Blockly.Arduino.ORDER_COMMA) || "0",
      c = Blockly.Arduino.valueToCode(a, "LOW", Blockly.Arduino.ORDER_COMMA) || "0";
    a = Blockly.Arduino.valueToCode(a, "HIGH", Blockly.Arduino.ORDER_COMMA) || "Infinity";
    return ["Math.min(Math.max(" + b + ", " + c + "), " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.math_random_int = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "FROM", Blockly.Arduino.ORDER_COMMA) || "0";
    a = Blockly.Arduino.valueToCode(a, "TO", Blockly.Arduino.ORDER_COMMA) || "0";
    return [Blockly.Arduino.provideFunction_("mathRandomInt", ["function " + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + "(a, b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    var c = a;", "    a = b;", "    b = c;", "  }", "  return Math.floor(Math.random() * (b - a + 1) + a);", "}"]) + "(" + b + ", " + a + ")", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.math_random_float = function (a) {
    return ["Math.random()", Blockly.Arduino.ORDER_FUNCTION_CALL]
  };

  Blockly.Arduino.math_atan2 = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "X", Blockly.Arduino.ORDER_COMMA) || "0";
    return ["Math.atan2(" + (Blockly.Arduino.valueToCode(a, "Y", Blockly.Arduino.ORDER_COMMA) || "0") + ", " + b + ") / Math.PI * 180", Blockly.Arduino.ORDER_DIVISION]
  };

  Blockly.Arduino.logic = {};

  Blockly.Arduino.react_controls_if = function (a) {
    var b = 0,
      c = "";
    Blockly.Arduino.STATEMENT_PREFIX && (c += Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_PREFIX, a));
    do {
      var d = Blockly.Arduino.valueToCode(a, "IF" + b, Blockly.Arduino.ORDER_NONE) || "false";
      var e = Blockly.Arduino.statementToCode(a, "DO" + b);
      Blockly.Arduino.STATEMENT_SUFFIX && (e = Blockly.Arduino.prefixLines(Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_SUFFIX, a), Blockly.Arduino.INDENT) + e);
      c += (0 < b ? " else " : "") + "if (" + d + ") {\n" + e + "}"; ++b
    } while
      (a.getInput("IF" + b));
    if (a.getInput("ELSE") || Blockly.Arduino.STATEMENT_SUFFIX) e = Blockly.Arduino.statementToCode(a, "ELSE"), Blockly.Arduino.STATEMENT_SUFFIX && (e = Blockly.Arduino.prefixLines(Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_SUFFIX, a), Blockly.Arduino.INDENT) + e), c += " else {\n" + e + "}";
    return c + "\n"
  };

  Blockly.Arduino.controls_ifelse = Blockly.Arduino.controls_if;
  Blockly.Arduino.react_logic_compare = function (a) {
    var b = {
      EQ: "==",
      NEQ: "!=",
      LT: "<",
      LTE: "<=",
      GT: ">",
      GTE: ">="
    }[a.getFieldValue("OP")],
      c = "==" == b || "!=" == b ? Blockly.Arduino.ORDER_EQUALITY : Blockly.Arduino.ORDER_RELATIONAL,
      d = Blockly.Arduino.valueToCode(a, "A", c) || "0";
    a = Blockly.Arduino.valueToCode(a, "B", c) || "0";
    return [d + " " + b + " " + a, c]
  };

  Blockly.Arduino.logic_operation = function (a) {
    var b = "AND" == a.getFieldValue("OP") ? "&&" : "||",
      c = "&&" == b ? Blockly.Arduino.ORDER_LOGICAL_AND : Blockly.Arduino.ORDER_LOGICAL_OR,
      d = Blockly.Arduino.valueToCode(a, "A", c);
    a = Blockly.Arduino.valueToCode(a, "B", c);
    if (d || a) {
      var e = "&&" == b ? "true" : "false";
      d || (d = e);
      a || (a = e)
    } else a = d = "false";
    return [d + " " + b + " " + a, c]
  };

  Blockly.Arduino.logic_negate = function (a) {
    var b = Blockly.Arduino.ORDER_LOGICAL_NOT;
    return ["!" + (Blockly.Arduino.valueToCode(a, "BOOL", b) || "true"), b]
  };

  Blockly.Arduino.logic_boolean = function (a) {
    return ["TRUE" == a.getFieldValue("BOOL") ? "true" : "false", Blockly.Arduino.ORDER_ATOMIC]
  };

  Blockly.Arduino.logic_null = function (a) {
    return ["null", Blockly.Arduino.ORDER_ATOMIC]
  };

  Blockly.Arduino.logic_ternary = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "IF", Blockly.Arduino.ORDER_CONDITIONAL) || "false",
      c = Blockly.Arduino.valueToCode(a, "THEN", Blockly.Arduino.ORDER_CONDITIONAL) || "null";
    a = Blockly.Arduino.valueToCode(a, "ELSE", Blockly.Arduino.ORDER_CONDITIONAL) || "null";
    return [b + " ? " + c + " : " + a, Blockly.Arduino.ORDER_CONDITIONAL]
  };







  ///Categoria Bucles//

  Blockly.Arduino.loops = {};
  //Codigo del 1er Bloque

  Blockly.Arduino.react_controls_repeat = function (a) {
    var b = a.getField("TIMES") ? String(Number(a.getFieldValue("TIMES"))) : Blockly.Arduino.valueToCode(a, "TIMES", Blockly.Arduino.ORDER_ASSIGNMENT) || "0",
      c = Blockly.Arduino.statementToCode(a, "DO");
    c = Blockly.Arduino.addLoopTrap(c, a);
    a = "";
    var d = Blockly.Arduino.variableDB_.getDistinctName("count", Blockly.Variables.NAME_TYPE),
      e = b;
    b.match(/^\w+$/) || Blockly.isNumber(b) || (e = Blockly.Arduino.variableDB_.getDistinctName("repeat_end", Blockly.Variables.NAME_TYPE), a += "var " + e + " = " + b + ";\n");
    return a + ("for (var " + d + " = 0; " + d + " < " + e + "; " + d + "++) {\n" + c + "}\n")
  };
  //Codigo del 2do Bloque

  Blockly.Arduino.react_controls_while = function (a) {
    var b = Blockly.Arduino.valueToCode(a, "BOOL", Blockly.Arduino.ORDER_NONE) || "false",
      c = Blockly.Arduino.statementToCode(a, "DO");
    c = Blockly.Arduino.addLoopTrap(c, a.id);
    return "while (" + b + ") {\n" + c + "}\n"
  };
  //Codigo del 3er Bloque

  Blockly.Arduino.react_controls_for = function () {
    var a = Blockly.Arduino.variableDB_.getName(this.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
      b = Blockly.Arduino.valueToCode(this, "FROM", Blockly.Arduino.ORDER_ASSIGNMENT) || "0",
      c = Blockly.Arduino.valueToCode(this, "TO", Blockly.Arduino.ORDER_ASSIGNMENT) || "0",
      d = Blockly.Arduino.statementToCode(this, "DO");
    Blockly.Arduino.INFINITE_LOOP_TRAP && (d = Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g, "'" + this.id + "'") + d);
    if (b.match(/^-?\d+(\.\d+)?$/) && c.match(/^-?\d+(\.\d+)?$/)) {
      var e =
        parseFloat(b) <= parseFloat(c);
      d = "for (" + a + " = " + b + "; " + a + (e ? " <= " : " >= ") + c + "; " + a + (e ? "++" : "--") + ") {\n" + d + "}\n"
    } else d = "", e = b, b.match(/^\w+$/) || b.match(/^-?\d+(\.\d+)?$/) || (e = Blockly.Arduino.variableDB_.getDistinctName(a + "_start", Blockly.Variables.NAME_TYPE), d += "int " + e + " = " + b + ";\n"), b = c, c.match(/^\w+$/) || c.match(/^-?\d+(\.\d+)?$/) || (b = Blockly.Arduino.variableDB_.getDistinctName(a + "_end", Blockly.Variables.NAME_TYPE), d += "int " + b + " = " + c + ";\n"), d += "for (" + a + " = " + e + ";\n    (" + e + " <= " + b + ") ? " + a +
      " <= " + b + " : " + a + " >= " + b + ";\n    " + a + " += (" + e + " <= " + b + ") ? 1 : -1) {\n" + branch0 + "}\n";
    return d
  };
  //Codigo del 4to Bloque

  Blockly.Arduino.react_controls_flow_statements = function (a) {
    switch (a.getFieldValue("FLOW")) {
      case "BREAK":
        return "break;\n";
      case "CONTINUE":
        return "continue;\n"
    }
    throw "Unknown flow statement.";
  };


  Blockly.Arduino.variablesDynamic = {};

  Blockly.Arduino.variables_get_dynamic = Blockly.Arduino.variables_get;
  Blockly.Arduino.variables_set_dynamic = Blockly.Arduino.variables_set;
  return Blockly.Arduino;
}));