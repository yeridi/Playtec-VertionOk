/* eslint-disable */
; (function (root, factory) {
  if (typeof define === 'function' && define.amd) { // AMD
    define(['../core'], factory);
  } else if (typeof exports === 'object') { // Node.js
    module.exports = factory(require('../core'));
  } else { // Browser
    root.Blockly.Msg = factory(root.Blockly);
  }
}(this, function (Blockly) {

  var Blockly = {}; Blockly.Msg = {};// This file was automatically generated.  Do not modify.

  'use strict';

  Blockly.Msg["ADD_COMMENT"] = "Añadir comentario";
  Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "No se puede eliminar la variable '%1' porque es parte de la definición de la función '%2'";
  Blockly.Msg["CHANGE_VALUE_TITLE"] = "Cambiar el valor:";
  Blockly.Msg["CLEAN_UP"] = "Limpiar los bloques";
  Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Bloques colapsados contienen advertencias.";
  Blockly.Msg["COLLAPSE_ALL"] = "Contraer bloques";
  Blockly.Msg["COLLAPSE_BLOCK"] = "Contraer bloque";
  Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "color 1";
  Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "color 2";
  Blockly.Msg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
  Blockly.Msg["COLOUR_BLEND_RATIO"] = "proporción";
  Blockly.Msg["COLOUR_BLEND_TITLE"] = "combinar";
  Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Combina dos colores con una proporción determinada (0,0-1,0).";
  Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://es.wikipedia.org/wiki/Color";
  Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Elige un color de la paleta.";
  Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
  Blockly.Msg["COLOUR_RANDOM_TITLE"] = "color aleatorio";
  Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Elige un color al azar.";
  Blockly.Msg["COLOUR_RGB_BLUE"] = "azul";
  Blockly.Msg["COLOUR_RGB_GREEN"] = "verde";
  Blockly.Msg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
  Blockly.Msg["COLOUR_RGB_RED"] = "rojo";
  Blockly.Msg["COLOUR_RGB_TITLE"] = "colorear con";
  Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Crea un color con cantidades específicas de rojo, verde y azul. Todos los valores deben encontrarse entre 0 y 100.";
  Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
  Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "romper el bucle";
  Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continuar con la siguiente iteración del bucle";
  Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Romper el bucle que lo contiene.";
  Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Saltar el resto de este bucle, y continuar con la siguiente iteración.";
  Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Atención: este bloque puede usarse solamente dentro de un bucle.";
  Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://es.wikipedia.org/wiki/Foreach";
  Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "para cada elemento %1 en la lista %2";
  Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Para cada elemento en una lista, establecer la variable '%1' al elemento y luego hacer algunas declaraciones.";
  Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
  Blockly.Msg["CONTROLS_FOR_TITLE"] = "contar con %1 desde %2 hasta %3";
  Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Hacer que la variable \"%1\" tome los valores desde el número de inicio hasta el número final, contando con el intervalo especificado, y hacer los bloques especificados.";
  Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Agregar una condición a este bloque.";
  Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Agregar una condición general final a este bloque.";
  Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
  Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Agregar, eliminar o reordenar las secciones para reconfigurar este bloque.";
  Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "sino";
  Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "sino si";
  Blockly.Msg["CONTROLS_IF_MSG_IF"] = "si";
  Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Si un valor es verdadero, entonces hacer algunas declaraciones.";
  Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Si un valor es verdadero, entonces hacer el primer bloque de declaraciones.  De lo contrario, hacer el segundo bloque de declaraciones.";
  Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones.";
  Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones. Si ninguno de los valores son verdaderos, hacer el último bloque de declaraciones.";
  Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
  Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "hacer";
  Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repetir %1 veces";
  Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Hacer algunas declaraciones varias veces.";
  Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
  Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repetir hasta";
  Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repetir mientras";
  Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Mientras un valor sea falso, entonces hacer algunas declaraciones.";
  Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Mientras un valor sea verdadero, entonces hacer algunas declaraciones.";
  Blockly.Msg["DELETE_ALL_BLOCKS"] = "¿Eliminar todos los %1 bloques?";
  Blockly.Msg["DELETE_BLOCK"] = "Eliminar bloque";
  Blockly.Msg["DELETE_VARIABLE"] = "Borrar la variable \"%1\"";
  Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "¿Borrar %1 usos de la variable '%2'?";
  Blockly.Msg["DELETE_X_BLOCKS"] = "Eliminar %1 bloques";
  Blockly.Msg["DISABLE_BLOCK"] = "Desactivar bloque";
  Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicar";
  Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicar comentario";
  Blockly.Msg["ENABLE_BLOCK"] = "Activar bloque";
  Blockly.Msg["EXPAND_ALL"] = "Expandir bloques";
  Blockly.Msg["EXPAND_BLOCK"] = "Expandir bloque";
  Blockly.Msg["EXTERNAL_INPUTS"] = "Entradas externas";
  Blockly.Msg["HELP"] = "Ayuda";
  Blockly.Msg["INLINE_INPUTS"] = "Entradas en línea";
  Blockly.Msg["IOS_CANCEL"] = "Cancelar";
  Blockly.Msg["IOS_ERROR"] = "Error";
  Blockly.Msg["IOS_OK"] = "Aceptar";
  Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Añadir entrada";
  Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Permitir declaraciones";
  Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Esta función tiene entradas duplicadas.";
  Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "ENTRADAS";
  Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Añadir";
  Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Añadir variable";
  Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Borrar";
  Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "No puedes usar un nombre de variable vacío.";
  Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Renombrar";
  Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Nombre de la variable";
  Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
  Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "crear lista vacía";
  Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Devuelve una lista, de longitud 0, sin ningún dato";
  Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "lista";
  Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Agregar, eliminar o reorganizar las secciones para reconfigurar este bloque de lista.";
  Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
  Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "crear lista con";
  Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Agregar un elemento a la lista.";
  Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Crear una lista con cualquier número de elementos.";
  Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "primero";
  Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# del final";
  Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
  Blockly.Msg["LISTS_GET_INDEX_GET"] = "obtener";
  Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "obtener y eliminar";
  Blockly.Msg["LISTS_GET_INDEX_LAST"] = "último";
  Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "aleatorio";
  Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "eliminar";
  Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Devuelve el primer elemento de una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Devuelve el elemento en la posición especificada en una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Devuelve el último elemento de una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Devuelve un elemento aleatorio en una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Elimina y devuelve el primer elemento de una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Elimina y devuelve el elemento en la posición especificada en una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Elimina y devuelve el último elemento de una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Elimina y devuelve un elemento aleatorio en una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Elimina el primer elemento de una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Elimina el elemento en la posición especificada en una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Elimina el último elemento de una lista.";
  Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Elimina un elemento aleatorio en una lista.";
  Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "hasta # del final";
  Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "hasta #";
  Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "hasta el último";
  Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
  Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "obtener sublista desde el primero";
  Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "obtener sublista desde # del final";
  Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "obtener sublista desde #";
  Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
  Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Crea una copia de la parte especificada de una lista.";
  Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 es el último elemento.";
  Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 es el primer elemento.";
  Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "encontrar la primera aparición del elemento";
  Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
  Blockly.Msg["LISTS_INDEX_OF_LAST"] = "encontrar la última aparición del elemento";
  Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Devuelve el índice de la primera/última aparición del elemento en la lista. Devuelve %1 si el elemento no se encuentra.";
  Blockly.Msg["LISTS_INLIST"] = "en la lista";
  Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
  Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 está vacía";
  Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Devuelve verdadero si la lista está vacía.";
  Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
  Blockly.Msg["LISTS_LENGTH_TITLE"] = "longitud de %1";
  Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Devuelve la longitud de una lista.";
  Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
  Blockly.Msg["LISTS_REPEAT_TITLE"] = "crear lista con el elemento %1 repetido %2 veces";
  Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Crea una lista que consta de un valor dado repetido el número de veces especificado.";
  Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
  Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "invertir %1";
  Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Invertir una copia de una lista.";
  Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
  Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "como";
  Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insertar en";
  Blockly.Msg["LISTS_SET_INDEX_SET"] = "establecer";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserta el elemento al inicio de una lista.";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserta el elemento en la posición especificada en una lista.";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Añade el elemento al final de una lista.";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserta el elemento aleatoriamente en una lista.";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Establece el primer elemento de una lista.";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Establece el elemento en la posición especificada en una lista.";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Establece el último elemento de una lista.";
  Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Establece un elemento aleatorio en una lista.";
  Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
  Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascendente";
  Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descendente";
  Blockly.Msg["LISTS_SORT_TITLE"] = "orden %1 %2 %3";
  Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Ordenar una copia de una lista.";
  Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alfabético, ignorar mayúscula/minúscula";
  Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numérico";
  Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alfabético";
  Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
  Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "hacer lista a partir de texto";
  Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "hacer texto a partir de lista";
  Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Unir una lista de textos en un solo texto, separado por un delimitador.";
  Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Dividir el texto en una lista de textos, separando en cada delimitador.";
  Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "con delimitador";
  Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "falso";
  Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
  Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Devuelve verdadero o falso.";
  Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "verdadero";
  Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://es.wikipedia.org/wiki/Desigualdad_matemática";
  Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Devuelve verdadero si ambas entradas son iguales.";
  Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Devuelve verdadero si la primera entrada es mayor que la segunda entrada.";
  Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Devuelve verdadero si la primera entrada es mayor o igual a la segunda entrada.";
  Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Devuelve verdadero si la primera entrada es menor que la segunda entrada.";
  Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Devuelve verdadero si la primera entrada es menor que o igual a la segunda entrada.";
  Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Devuelve verdadero si ambas entradas son distintas.";
  Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
  Blockly.Msg["LOGIC_NEGATE_TITLE"] = "no %1";
  Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Devuelve verdadero si la entrada es falsa. Devuelve falso si la entrada es verdadera.";
  Blockly.Msg["LOGIC_NULL"] = "nulo";
  Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
  Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Devuelve nulo.";
  Blockly.Msg["LOGIC_OPERATION_AND"] = "y";
  Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
  Blockly.Msg["LOGIC_OPERATION_OR"] = "o";
  Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Devuelve verdadero si ambas entradas son verdaderas.";
  Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Devuelve verdadero si al menos una de las entradas es verdadera.";
  Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "prueba";
  Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
  Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "si es falso";
  Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "si es verdadero";
  Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Comprueba la condición en \"prueba\". Si la condición es verdadera, devuelve el valor \"si es verdadero\"; de lo contrario, devuelve el valor \"si es falso\".";
  Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
  Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://es.wikipedia.org/wiki/Aritmética";
  Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Devuelve la suma de ambos números.";
  Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Devuelve el cociente de ambos números.";
  Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Devuelve la diferencia de ambos números.";
  Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Devuelve el producto de ambos números.";
  Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Devuelve el primer número elevado a la potencia del segundo.";
  Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://es.wikipedia.org/wiki/Arcotangente_de_dos_par%C3%A1metros";
  Blockly.Msg["MATH_ATAN2_TITLE"] = "Arcotangente de X:%1 Y:%2";
  Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Regresar el arcotangente del punto (X,Y) en grados de -180 a 180.";
  Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
  Blockly.Msg["MATH_CHANGE_TITLE"] = "añadir %2 a %1";
  Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Añadir un número a la variable «%1».";
  Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://es.wikipedia.org/wiki/Anexo:Constantes_matemáticas";
  Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Devuelve una de las constantes comunes: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…) o ∞ (infinito).";
  Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
  Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "limitar %1 entre %2 y %3";
  Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Limitar un número entre los límites especificados (inclusive).";
  Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
  Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "es divisible por";
  Blockly.Msg["MATH_IS_EVEN"] = "es par";
  Blockly.Msg["MATH_IS_NEGATIVE"] = "es negativo";
  Blockly.Msg["MATH_IS_ODD"] = "es impar";
  Blockly.Msg["MATH_IS_POSITIVE"] = "es positivo";
  Blockly.Msg["MATH_IS_PRIME"] = "es primo";
  Blockly.Msg["MATH_IS_TOOLTIP"] = "Comprueba si un número es par, impar, primo, entero, positivo, negativo, o si es divisible por un número determinado. Devuelve verdadero o falso.";
  Blockly.Msg["MATH_IS_WHOLE"] = "es entero";
  Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
  Blockly.Msg["MATH_MODULO_TITLE"] = "resto de %1 ÷ %2";
  Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Devuelve el resto al dividir los dos números.";
  Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
  Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://es.wikipedia.org/wiki/Número";
  Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Un número.";
  Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
  Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "promedio de la lista";
  Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "máximo de la lista";
  Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "mediana de la lista";
  Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "mínimo de la lista";
  Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modas de la lista";
  Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "elemento aleatorio de la lista";
  Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "desviación estándar de la lista";
  Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "suma de la lista";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Devuelve el promedio (media aritmética) de los valores numéricos en la lista.";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Devuelve el número más grande en la lista.";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Devuelve la mediana en la lista.";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Devuelve el número más pequeño en la lista.";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Devuelve una lista de los elementos más comunes en la lista.";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Devuelve un elemento aleatorio de la lista.";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Devuelve la desviación estándar de la lista.";
  Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Devuelve la suma de todos los números en la lista.";
  Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
  Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";
  Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "fracción aleatoria";
  Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Devuelve una fracción aleatoria entre 0,0 (ambos inclusive) y 1.0 (exclusivo).";
  Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";
  Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "entero aleatorio de %1 a %2";
  Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Devuelve un entero aleatorio entre los dos límites especificados, inclusive.";
  Blockly.Msg["MATH_ROUND_HELPURL"] = "https://es.wikipedia.org/wiki/Redondeo";
  Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "redondear";
  Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "redondear a la baja";
  Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "redondear al alza";
  Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Redondear un número al alza o a la baja.";
  Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://es.wikipedia.org/wiki/Ra%C3%ADz_cuadrada";
  Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absoluto";
  Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "raíz cuadrada";
  Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Devuelve el valor absoluto de un número.";
  Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Devuelve e a la potencia de un número.";
  Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Devuelve el logaritmo natural de un número.";
  Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Devuelve el logaritmo base 10 de un número.";
  Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Devuelve la negación de un número.";
  Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Devuelve 10 a la potencia de un número.";
  Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Devuelve la raíz cuadrada de un número.";
  Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
  Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
  Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
  Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
  Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
  Blockly.Msg["MATH_TRIG_HELPURL"] = "https://es.wikipedia.org/wiki/Función_trigonométrica";
  Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
  Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
  Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Devuelve el arcocoseno de un número.";
  Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Devuelve el arcoseno de un número.";
  Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Devuelve el arcotangente de un número.";
  Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Devuelve el coseno de un grado (no radián).";
  Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Devuelve el seno de un grado (no radián).";
  Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Devuelve la tangente de un grado (no radián).";
  Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Crear una variable de color...";
  Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Crear una variable de número...";
  Blockly.Msg["NEW_STRING_VARIABLE"] = "Crear una cadena variable...";
  Blockly.Msg["NEW_VARIABLE"] = "Crear variable…";
  Blockly.Msg["NEW_VARIABLE_TITLE"] = "Nombre de variable nueva:";
  Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Nuevo tipo de variable:";
  Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
  Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "permitir declaraciones";
  Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "con:";
  Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://es.wikipedia.org/wiki/Subrutina";
  Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Ejecuta la función definida por el usuario '%1'.";
  Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://es.wikipedia.org/wiki/Subrutina";
  Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Ejecuta la función definida por el usuario '%1' y usa su salida.";
  Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "con:";
  Blockly.Msg["PROCEDURES_CREATE_DO"] = "Crear '%1'";
  Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe esta función...";
  Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
  Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
  Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "hacer algo";
  Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "para";
  Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Crea una función sin salida.";
  Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
  Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "devuelve";
  Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Crea una función con una salida.";
  Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Advertencia: Esta función tiene parámetros duplicados.";
  Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Destacar definición de la función";
  Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
  Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Si un valor es verdadero, entonces devuelve un segundo valor.";
  Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Advertencia: Este bloque solo puede ser utilizado dentro de la definición de una función.";
  Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "nombre de entrada:";
  Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Añadir una entrada a la función.";
  Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "entradas";
  Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Añadir, eliminar o reordenar entradas para esta función.";
  Blockly.Msg["REDO"] = "Rehacer";
  Blockly.Msg["REMOVE_COMMENT"] = "Eliminar comentario";
  Blockly.Msg["RENAME_VARIABLE"] = "Cambiar nombre de variable…";
  Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Renombrar todas las variables «%1» a:";
  Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
  Blockly.Msg["TEXT_APPEND_TITLE"] = "a %1 añade el texto %2";
  Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Añadir texto a la variable '%1'.";
  Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
  Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "a minúsculas";
  Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "a Mayúsculas Cada Palabra";
  Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "a MAYÚSCULAS";
  Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Devuelve una copia del texto en un tamaño diferente.";
  Blockly.Msg["TEXT_CHARAT_FIRST"] = "obtener la primera letra";
  Blockly.Msg["TEXT_CHARAT_FROM_END"] = "obtener la letra # del final";
  Blockly.Msg["TEXT_CHARAT_FROM_START"] = "obtener la letra #";
  Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
  Blockly.Msg["TEXT_CHARAT_LAST"] = "obtener la última letra";
  Blockly.Msg["TEXT_CHARAT_RANDOM"] = "obtener letra aleatoria";
  Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
  Blockly.Msg["TEXT_CHARAT_TITLE"] = "en el texto %1 %2";
  Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Devuelve la letra en la posición especificada.";
  Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
  Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "contar %1 en %2";
  Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Cuantas veces aparece un texto dentro de otro texto.";
  Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Agregar un elemento al texto.";
  Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "unir";
  Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Agregar, eliminar o reordenar las secciones para reconfigurar este bloque de texto.";
  Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "hasta la letra # del final";
  Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "hasta la letra #";
  Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "hasta la última letra";
  Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
  Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "en el texto";
  Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "obtener subcadena desde la primera letra";
  Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "obtener subcadena desde la letra # del final";
  Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "obtener subcadena desde la letra #";
  Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
  Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Devuelve una porción determinada del texto.";
  Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
  Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "encontrar la primera aparición del texto";
  Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "encontrar la última aparición del texto";
  Blockly.Msg["TEXT_INDEXOF_TITLE"] = "en el texto %1 %2 %3";
  Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Devuelve el índice de la primera/última aparición del primer texto en el segundo texto. Devuelve %1 si el texto no se encuentra.";
  Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
  Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 está vacío";
  Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Devuelve verdadero si el texto proporcionado está vacío.";
  Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
  Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "crear texto con";
  Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Crear un fragmento de texto al unir cualquier número de elementos.";
  Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
  Blockly.Msg["TEXT_LENGTH_TITLE"] = "longitud de %1";
  Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Devuelve el número de letras (espacios incluidos) del texto proporcionado.";
  Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
  Blockly.Msg["TEXT_PRINT_TITLE"] = "imprimir %1";
  Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Imprimir el texto, número u otro valor especificado.";
  Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
  Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Solicitar al usuario un número.";
  Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Solicitar al usuario un texto.";
  Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "solicitar número con el mensaje";
  Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "solicitar texto con el mensaje";
  Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
  Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "reemplazar %1 con %2 en %3";
  Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Reemplazar todas las veces que un texto dentro de otro texto.";
  Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
  Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "invertir %1";
  Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Invierte el orden de los caracteres en el texto.";
  Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://es.wikipedia.org/wiki/Cadena_de_caracteres";
  Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Una letra, palabra o línea de texto.";
  Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
  Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "quitar espacios de ambos lados de";
  Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "quitar espacios iniciales de";
  Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "quitar espacios finales de";
  Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Devuelve una copia del texto sin los espacios de uno o ambos extremos.";
  Blockly.Msg["TODAY"] = "Hoy";
  Blockly.Msg["UNDO"] = "Deshacer";
  Blockly.Msg["UNNAMED_KEY"] = "unnamed";  // untranslated
  Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "elemento";
  Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Crear 'establecer %1'";
  Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
  Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Devuelve el valor de esta variable.";
  Blockly.Msg["VARIABLES_SET"] = "establecer %1 a %2";
  Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Crear 'obtener %1'";
  Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
  Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Establece esta variable para que sea igual a la entrada.";
  Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Ya existe una variable llamada '%1'.";
  Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Ya existe una variable nombrada '%1' para otra variable del tipo: '%2'.";
  Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Di algo…";
  Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
  Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
  Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
  Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
  Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
  Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
  Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
  Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
  Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
  Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
  Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
  Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
  Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
  Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
  Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
  Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
  Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
  Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
  Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
  Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

  Blockly.Msg["Logic"] = "Logica";
  Blockly.Msg["CONTROLS_WHILE"] = "mientras %1";
  Blockly.Msg["CONTROLS_WHILE_DO"] = "hacer que ";
  Blockly.Msg["ROMPER"] = "true";

  Blockly.Msg["MATH_HUE"] = "230";
  Blockly.Msg["LOOPS_HUE"] = "120";
  Blockly.Msg["LISTS_HUE"] = "260";
  Blockly.Msg["LOGIC_HUE"] = "210";
  Blockly.Msg["VARIABLES_HUE"] = "330";
  Blockly.Msg["TEXTS_HUE"] = "160";
  Blockly.Msg["PROCEDURES_HUE"] = "290";
  Blockly.Msg["COLOUR_HUE"] = "20";
  Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";
  /* digital i/o */
  Blockly.Msg["INOUT_ANALOGPIN_TEXT"] = "Analog Pin";
  Blockly.Msg["INOUT_ANALOG_READ_APPENDTEXT"] = "analogRead pin";
  Blockly.Msg["INOUT_ANALOG_READ_HELPURL"] = "http://arduino.cc/en/Reference/AnalogRead";
  Blockly.Msg["INOUT_ANALOG_READ_TOOLTIP"] = "Return value between 0 and 1024.";
  Blockly.Msg["INOUT_ANALOG_WRITE_APPENDTEXT_PIN"] = "analogWrite pin";
  Blockly.Msg["INOUT_ANALOG_WRITE_APPENDTEXT_VALUE"] = "value (0 - 255)";
  Blockly.Msg["INOUT_ANALOG_WRITE_HELPURL"] = "http://arduino.cc/en/Reference/AnalogWrite";
  Blockly.Msg["INOUT_ANALOG_WRITE_TOOLTIP"] = "Write analog value between 0 and 255 to a specific Port.";
  Blockly.Msg["INOUT_DIGITALPIN_TEXT"] = "Digital Pin";
  Blockly.Msg["INOUT_DIGITAL_READ_APPENDTEXT_PIN"] = "digitalRead pin";
  Blockly.Msg["INOUT_DIGITAL_READ_APPENDTEXT_PULLUP"] = "pullup";
  Blockly.Msg["INOUT_DIGITAL_READ_HELPURL"] = "http://arduino.cc/en/Reference/DigitalRead";
  Blockly.Msg["INOUT_DIGITAL_READ_TOOLTIP"] = "";
  Blockly.Msg["INOUT_DIGITAL_READ_PULLUP_APPENDTEXT_PIN"] = "digitalRead (default pullup) pin"
  Blockly.Msg["INOUT_ENABLE_INTERNAL_PULLUP_PIN"] = "Internal pullup on pin";
  Blockly.Msg["INOUT_ENABLE_INTERNAL_PULLUP_TOOLTIP"] = "Enable internal pullup resistor of about 50KOhm.";
  Blockly.Msg["INOUT_ENABLE_INTERNAL_PULLUP_HELPURL"] = "https://www.arduino.cc/en/Reference/PinMode";
  Blockly.Msg["INOUT_DIGITAL_WRITE_APPENDTEXT_PIN"] = "Digital Define pin";
  Blockly.Msg["INOUT_DIGITAL_WRITE_APPENDTEXT_STAT"] = "State";
  Blockly.Msg["INOUT_DIGITAL_WRITE_HELPURL"] = "http://arduino.cc/en/Reference/DigitalWrite";
  Blockly.Msg["INOUT_DIGITAL_WRITE_TOOLTIP"] = "Write digital value to a specific Port.";
  Blockly.Msg["INOUT_LED_BUINTIN"] = "Define LED";
  Blockly.Msg["INOUT_LED_BUINTIN_TOOLTIP"] = "light or off the build-in LED";
  Blockly.Msg["INOUT_HIGH"] = "HIGH";
  Blockly.Msg["INOUT_LOW"] = "LOW";
  Blockly.Msg["INOUT_OFF"] = "OFF";
  Blockly.Msg["INOUT_ON"] = "ON";
  Blockly.Msg["INOUT_PULSEIN_APPENDTEXT_PIN"] = "Pulsein Pin";
  Blockly.Msg["INOUT_PULSEIN_APPENDTEXT_TIMEOUT"] = "Timeout";
  Blockly.Msg["INOUT_PULSEIN_APPENDTEXT_TYPE"] = "Type";
  Blockly.Msg["INOUT_PULSEIN_HELPURL"] = "http://arduino.cc/en/Reference/pulseIn";
  Blockly.Msg["INOUT_PULSEIN_TOOLTIP"] = "Reads a pulse (either HIGH or LOW) on a pin.";
  Blockly.Msg["INOUT_TONE_APPENDTEXT_DURATION"] = "duration (ms)";
  Blockly.Msg["INOUT_TONE_APPENDTEXT_FREQ"] = "frequency";
  Blockly.Msg["INOUT_TONE_APPENDTEXT_PIN"] = "Tone pin";
  Blockly.Msg["INOUT_TONE_HELPURL"] = "http://arduino.cc/en/reference/tone";
  Blockly.Msg["INOUT_TONE_TOOLTIP"] = "The pin can be connected to a piezo buzzer or other speaker to play tones.";
  /*end digital i/o */

  /*inticialite */
  Blockly.Msg["INITIALIZES_SETUP_APPENDTEXT"] = "setup";
  Blockly.Msg["INITIALIZES_LOOP_APPENDTEXT"] = "loop";
  Blockly.Msg["INITIALIZES_SETUP_HELPURL"] = "http://www.arduino.cc/en/Reference/Setup";
  Blockly.Msg["INITIALIZES_SETUP_TOOLTIP"] = "The setup() function is called when a sketch starts. ";
  Blockly.Msg["INITIALIZES_LOOP_HELPURL"] = "http://www.arduino.cc/en/Reference/Loop";
  Blockly.Msg["INITIALIZES_LOOP_TOOLTIP"] = "After creating a setup() function, the loop() function loops consecutively, allowing your program to change and respond.";
  Blockly.Msg["INITIALIZES_TEMP_APPENDTEXT"] = "Temp";
  Blockly.Msg["INITIALIZES_TEMP_HELPURL"] = "";
  Blockly.Msg["INITIALIZES_SETUP_TOOLTIP"] = "Blocks within this scope will not be generate.";
  /*end initialite  */

  /* categoria analogi  */

  Blockly.Msg["INOUT_ANALOGPIN_TEXT"] = "Analog Pin";
  Blockly.Msg["INOUT_ANALOG_READ_APPENDTEXT"] = "analogRead pin";
  Blockly.Msg["INOUT_ANALOG_READ_HELPURL"] = "http://arduino.cc/en/Reference/AnalogRead";
  Blockly.Msg["INOUT_ANALOG_READ_TOOLTIP"] = "Return value between 0 and 1024.";
  Blockly.Msg["INOUT_ANALOG_WRITE_APPENDTEXT_PIN"] = "analogWrite pin";
  Blockly.Msg["INOUT_ANALOG_WRITE_APPENDTEXT_VALUE"] = "value (0 - 255)";
  Blockly.Msg["INOUT_ANALOG_WRITE_HELPURL"] = "http://arduino.cc/en/Reference/AnalogWrite";
  Blockly.Msg["INOUT_ANALOG_WRITE_TOOLTIP"] = "Write analog value between 0 and 255 to a specific Port.";
  /* end cat analog */

  /* categoria serial  */
  Blockly.Msg["SERIAL_INIT"] = "Serial Begin";
  Blockly.Msg["SERIAL_INIT_HELPURL"] = "https://www.arduino.cc/en/Serial/Begin";
  Blockly.Msg["SERIAL_INIT_TOOLTIP"] = "Sets the data rate in bits per second (baud) for serial data transmission.";
  Blockly.Msg["SERIAL_AVAILABLE_APPENDTEXT"] = "Serial habilitado";
  Blockly.Msg["SERIAL_AVAILABLE_HELPURL"] = "http://www.arduino.cc/en/Serial/available";
  Blockly.Msg["SERIAL_AVAILABLE_TOOLTIP"] = "Get the number of bytes (characters) available for reading from the serial port.";
  Blockly.Msg["SERIAL_BYTE_NUMBER"] = "Byte Code of Number";
  Blockly.Msg["SERIAL_BYTE_NUMBER_TEXT1"] = "Byte code of";
  Blockly.Msg["SERIAL_BYTE_NUMBER_TEXT2"] = "";
  Blockly.Msg["SERIAL_PRINTLN_APPENDTEXT"] = "Serial println";
  Blockly.Msg["SERIAL_PRINTLN_HELPURL"] = "http://www.arduino.cc/en/Serial/Println";
  Blockly.Msg["SERIAL_PRINTLN_TOOLTIP"] = "Prints data to the serial port as human-readable ASCII text followed by a carriage return character and a newline characte.";
  Blockly.Msg["SERIAL_PRINT_APPENDTEXT"] = "Serial print";
  Blockly.Msg["SERIAL_PRINT_HELPURL"] = "http://www.arduino.cc/en/Serial/Print";
  Blockly.Msg["SERIAL_PRINT_TOOLTIP"] = "Prints data to the console/serial port as human-readable ASCII text.";
  Blockly.Msg["SERIAL_READ_APPENDTEXT"] = "Leer serial";
  Blockly.Msg["SERIAL_READ_HELPURL"] = "http://www.arduino.cc/en/Serial/Read";
  Blockly.Msg["SERIAL_READ_TOOLTIP"] = "the first byte of incoming serial data available (or -1 if no data is available).";
  /* end cat serial */
  /* categoria timer */
  Blockly.Msg.TIMES_DELAYMICROSECONDS_APPENDTEXT = "Retrasar MicroSegundos";
  Blockly.Msg.TIMES_DELAYMICROSECONDS_HELPURL = "http://arduino.cc/en/Reference/DelayMicroseconds";
  Blockly.Msg.TIMES_DELAYMICROSECONDS_TOOLTIP = "Pauses the program for the amount of time (in microseconds) specified as parameter.";
  Blockly.Msg.TIMES_DELAY_APPENDTEXT = "esperar";
  Blockly.Msg.TIMES_DELAY_HELPURL = "http://arduino.cc/en/Reference/delay";
  Blockly.Msg.TIMES_DELAY_TOOLTIP = "Delay specific time";
  Blockly.Msg.TIMES_MICROS_APPENDTEXT = "micros";
  Blockly.Msg.TIMES_MICROS_HELPURL = "hhttp://arduino.cc/en/Reference/Micros";
  Blockly.Msg.TIMES_MICROS_TOOLTIP = "Returns the number of microseconds since the Arduino board began running the current program.";
  Blockly.Msg.TIMES_MILLIS_APPENDTEXT = "millis";
  Blockly.Msg.TIMES_MILLIS_HELPURL = "hhttp://arduino.cc/en/Reference/Millis";
  Blockly.Msg.TIMES_MILLIS_TOOLTIP = "Returns the number of milliseconds since the Arduino board began running the current program.";
  /* end cat timer */

  /* CATEGORY SERVO */
  Blockly.Msg.SERVO_ANGLE_TEXT1 = "ángulo (1 - 180)";
  Blockly.Msg.SERVO_ANGLE_TEXT2 = "";
  Blockly.Msg.SERVO_ANGLE_US_TEXT1 = "ancho de pulso";
  Blockly.Msg.SERVO_ANGLE_US_TEXT2 = "";
  Blockly.Msg.SERVO_ATTACHED_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttached";
  Blockly.Msg.SERVO_ATTACHED_TEXT1 = "Pin";
  Blockly.Msg.SERVO_ATTACHED_TEXT2 = "Attached?";
  Blockly.Msg.SERVO_ATTACHED_TOOLTIP = "Check whether the Servo variable is attached to a pin.";
  Blockly.Msg.SERVO_ATTACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttach";
  Blockly.Msg.SERVO_ATTACH_MAX_TEXT1 = "max";
  Blockly.Msg.SERVO_ATTACH_MAX_TEXT2 = "";
  Blockly.Msg.SERVO_ATTACH_MIN_TEXT1 = "min";
  Blockly.Msg.SERVO_ATTACH_MIN_TEXT2 = "";
  Blockly.Msg.SERVO_ATTACH_TEXT1 = "Adjuntar servo pin";
  Blockly.Msg.SERVO_ATTACH_TEXT2 = "";
  Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach the Servo variable to a pin.";
  Blockly.Msg.SERVO_DETACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoDetach";
  Blockly.Msg.SERVO_DETACH_TEXT1 = "Pin";
  Blockly.Msg.SERVO_DETACH_TEXT2 = "Detach";
  Blockly.Msg.SERVO_DETACH_TOOLTIP = "Detach the Servo variable from its pin.";
  Blockly.Msg.SERVO_READ_HELPURL = "http://www.arduino.cc/en/Reference/ServoRead";
  Blockly.Msg.SERVO_READ_TEXT1 = "Leer servo pin";
  Blockly.Msg.SERVO_READ_TEXT2 = "ángulo actual";
  Blockly.Msg.SERVO_READ_TOOLTIP = "Read the current angle of the servo (the value passed to the last call to write()).";
  Blockly.Msg.SERVO_WRITE_HELPURL = "http://www.arduino.cc/en/Reference/ServoWrite";
  Blockly.Msg.SERVO_WRITE_TEXT1 = "Girar servo en pin";
  Blockly.Msg.SERVO_WRITE_TEXT2 = "";
  Blockly.Msg.SERVO_WRITE_TOOLTIP = "Writes a value to the servo, controlling the shaft accordingly.";
  Blockly.Msg.SERVO_WRITE_US_HELPURL = "http://www.arduino.cc/en/Reference/ServoWriteMicroseconds";
  Blockly.Msg.SERVO_WRITE_US_TOOLTIP = "Writes a value in microSeconds(uS) to the servo, controlling the shaft accordingly.";

  /* END SERVO */

  // Bluetooth
  Blockly.Msg.CATEGORY_BLUETOOTH = "Bluetooth";
  Blockly.Msg.BLUETOOTH_LECTURA = "Lectura";
  Blockly.Msg.BLUETOOTH_AVAILABLE = "Habilitar Serial";
  Blockly.Msg.BT_WRITE = "BT Escribir";
  Blockly.Msg.SERIAL_READ = "Leer serial";
  Blockly.Msg.BLUETOOTH_AVAILABLE_BT = "Habilitar BT";
  Blockly.Msg.SERIAL_WRITE = "Serial Escribir";
  Blockly.Msg.SERIAL_BT_READ = "Leer BT";
  // end bluetooth

  Blockly.Msg.variables = "juan jesus";
  return Blockly.Msg;
})); 
